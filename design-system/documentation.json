{
    "pipes": [
        {
            "name": "AreaPipe",
            "id": "pipe-AreaPipe-ba09fc8cf66ce7b677bd39ead7115726",
            "file": "projects/kakal-ui/src/lib/pipes/area.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "area",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'area',\r\n})\r\nexport class AreaPipe implements PipeTransform {\r\n  transform(value: number, tag?: string): string {\r\n\r\n    tag = tag || 'מ\"ר';\r\n\r\n    return `${value} ${tag}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "FormatPipe",
            "id": "pipe-FormatPipe-66dcab3370d576abaec15a16c2b0f8f7",
            "file": "projects/kakal-ui/src/lib/pipes/format.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatObj",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "args",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "args",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "format",
            "sourceCode": "import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\nimport { AreaPipe } from './area.pipe';\r\nimport { formatDate, formatNumber, formatCurrency } from '@angular/common';\r\nimport { PrefixPipe } from './prefix.pipe';\r\nimport { LocationPipe } from './location.pipe';\r\n\r\n@Pipe({\r\n  name: 'format',\r\n})\r\nexport class FormatPipe implements PipeTransform {\r\n  constructor(\r\n    private area: AreaPipe,\r\n    private prefix: PrefixPipe,\r\n    private location: LocationPipe,\r\n    @Inject(LOCALE_ID) private locale: string\r\n  ) {}\r\n\r\n  private formatObj(value: any, format: string, args?: string): string {\r\n    const formats = {\r\n      location: this.location.transform(value),\r\n      area: this.area.transform(value),\r\n      prefix: this.prefix.transform(value, args),\r\n      currency: formatCurrency(value, this.locale, '₪', 'ILS', '1.0'),\r\n      number: formatNumber(value, this.locale),\r\n    };\r\n    return formats[format] !== undefined ? formats[format] : value;\r\n  }\r\n\r\n  private formatDate(value: any, format: string, args?: string): string {\r\n    const name = value.constructor.name.toLowerCase();\r\n    const formats = {\r\n      time: formatDate(value, 'HH:mm', this.locale),\r\n      date: formatDate(value, 'd/M/yy', this.locale),\r\n      fullDate: formatDate(value, 'HH:mm d/M/yy', this.locale),\r\n    };\r\n    return name === 'date' && value.toString() !== 'Invalid Date'\r\n      ? formats[format]\r\n      : value;\r\n  }\r\n\r\n  private formatValue(value: unknown, format?: string, args?): unknown {\r\n    const name = value?.constructor.name.toLowerCase();\r\n    return name === 'date'\r\n      ? this.formatDate(value, format, args)\r\n      : this.formatObj(value, format, args);\r\n  }\r\n\r\n  public transform(value: unknown, format?: string, args?): unknown {\r\n    return format && value ? this.formatValue(value, format, args) : value;\r\n  }\r\n}\r\n"
        },
        {
            "name": "LocationPipe",
            "id": "pipe-LocationPipe-d795b5ad322e139dd1d3a7c8f4930544",
            "file": "projects/kakal-ui/src/lib/pipes/location.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Location"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Location",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "location",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nexport declare type LocationFormats = 'c-d' | 'c-d-s';\r\n\r\n@Pipe({\r\n  name: 'location',\r\n})\r\nexport class LocationPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(value: Location, format?: string): string {\r\n    let location = '';\r\n\r\n    const entries = Object.entries(value);\r\n\r\n    const locationPrefixMap: { [x: string]: string } = {\r\n      district: 'מחוז',\r\n      street: 'רחוב',\r\n    };\r\n\r\n    location = entries\r\n      .map(([key, value]) => {\r\n        return value !== undefined\r\n          ? [locationPrefixMap[key], value].join(' ')\r\n          : null;\r\n      })\r\n      .filter((item) => item !== null)\r\n      .join(', ');\r\n\r\n    return location;\r\n  }\r\n}\r\n"
        },
        {
            "name": "PrefixPipe",
            "id": "pipe-PrefixPipe-062f7cbc764f1293123a18cb469c9428",
            "file": "projects/kakal-ui/src/lib/pipes/prefix.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "prefix",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'prefix',\r\n})\r\nexport class PrefixPipe implements PipeTransform {\r\n  transform(value: any, prefix?: string): string {\r\n    return `${prefix}${value}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "RangePipe",
            "id": "pipe-RangePipe-30070e5f5fc493b8b8522b3f64637397",
            "file": "projects/kakal-ui/src/lib/pipes/range.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Range"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Range",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "range",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Range } from '../components/columns/column-filter/column-filter.component';\r\n\r\nimport { FormatPipe } from './format.pipe';\r\n\r\n@Pipe({\r\n  name: 'range',\r\n})\r\nexport class RangePipe implements PipeTransform {\r\n  constructor(private format: FormatPipe) {}\r\n\r\n  transform(value: Range, format?: string): string {\r\n    let result = '';\r\n\r\n    const { to, from } = value;\r\n\r\n    if (to && from) {\r\n      result = `${this.format.transform(from, format)}-${this.format.transform(\r\n        to,\r\n        format\r\n      )}`;\r\n    } else if (to || from) {\r\n      result = `${this.format.transform(from, format)}`;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "KakalUiService",
            "id": "injectable-KakalUiService-be3d2ceb6844fcc97f16093dd4110f25",
            "file": "projects/kakal-ui/src/lib/kakal-ui.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KakalUiService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "BorderDirective",
            "id": "directive-BorderDirective-d7241a240fdb5c358bf8a5644c2a55ba",
            "file": "projects/kakal-ui/src/lib/directives/border.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\nimport { palette, Palette } from 'src/styles/theme';\r\n\r\n@Directive({\r\n  selector: '[appBorder]',\r\n})\r\nexport class BorderDirective {\r\n  private palette = palette;\r\n\r\n  @Input() color: Palette;\r\n  @Input() thick: number;\r\n  @Input() disabled: boolean;\r\n\r\n  @HostBinding('style.border') private border: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.border = `${this.thick || 1}px solid ${\r\n      this.palette[this.color || 'primary']\r\n    }`;\r\n  }\r\n}\r\n",
            "selector": "[appBorder]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "color",
                    "line": 10,
                    "type": "Palette"
                },
                {
                    "name": "disabled",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "thick",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.border",
                    "line": 14,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "palette",
                    "defaultValue": "palette",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            }
        },
        {
            "name": "ButtonDirective",
            "id": "directive-ButtonDirective-2e2f0a52e1936ced4a972df4ed042736",
            "file": "projects/kakal-ui/src/lib/directives/button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appButton]'\r\n})\r\nexport class ButtonDirective {\r\n\r\n\r\n  @HostBinding('style.cursor') private cursor: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.cursor = 'pointer'\r\n  }\r\n\r\n}\r\n",
            "selector": "[appButton]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.cursor",
                    "line": 9,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            }
        },
        {
            "name": "CellDirective",
            "id": "directive-CellDirective-dd15b12406c79b307f385a0373360860",
            "file": "projects/kakal-ui/src/lib/directives/cell.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appCell]'\r\n})\r\nexport class CellDirective {\r\n\r\n  @Input() span: number;\r\n\r\n  @HostBinding('style.flex') private flex: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.flex = this.span || 0.1\r\n  }\r\n}\r\n",
            "selector": "[appCell]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "span",
                    "line": 8,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.flex",
                    "line": 10,
                    "type": "number"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "FlexStartDirective",
            "id": "directive-FlexStartDirective-2d88e72c88092753708cf40964a25a2c",
            "file": "projects/kakal-ui/src/lib/directives/flexStart.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appFlexStart]'\r\n})\r\nexport class FlexStartDirective {\r\n\r\n  @HostBinding('style.display') private display: string;\r\n  @HostBinding('style.justify-content') private justify: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.display = 'flex'\r\n    this.justify = 'start'\r\n  }\r\n}\r\n",
            "selector": "[appFlexStart]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.display",
                    "line": 8,
                    "type": "string"
                },
                {
                    "name": "style.justify-content",
                    "line": 9,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            }
        },
        {
            "name": "OutsideDirective",
            "id": "directive-OutsideDirective-2c7c5f3cf9899b801053e602a63ea66d",
            "file": "projects/kakal-ui/src/lib/directives/outside.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, EventEmitter, Output} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appOutside]',\r\n  host: {\r\n    '(document:click)': 'onClick($event)',\r\n  }\r\n})\r\nexport class OutsideDirective {\r\n  @Output() public clickOutside:EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n  public counter = 0;\r\n\r\n  public onClick(event: any) {\r\n    if (!this.elementRef.nativeElement.contains(event.target)) {\r\n      this.counter++;\r\n      if (this.counter > 1) {\r\n        this.clickOutside.emit();\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",
            "selector": "[appOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter<any>"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SizeDirective",
            "id": "directive-SizeDirective-9668058a66171c3ff786ee8f2e7d7f55",
            "file": "projects/kakal-ui/src/lib/directives/size.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\r\n  Directive,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  CardStepModel,\r\n  StepType,\r\n} from '../components/cards/card-step/card-step.model';\r\nimport { BreakpointService } from '../services/breakpoint.service';\r\nimport { map, Observable, of, Subscription, switchMap } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[appSize]',\r\n})\r\nexport class SizeDirective implements OnInit, OnDestroy {\r\n  @Input() step: CardStepModel;\r\n  @Input() size: number;\r\n  @Input() type: StepType;\r\n  @Input() divider: number;\r\n  @Input() space: number;\r\n\r\n  private mobile$: Observable<boolean>;\r\n\r\n  private subscription: Subscription;\r\n\r\n  @HostBinding('style.height') public height: string;\r\n  @HostBinding('style.width') public width: string;\r\n\r\n  private stepHeight: number;\r\n\r\n  constructor(private breakpointService: BreakpointService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setSize();\r\n    this.mobile$ = this.breakpointService.isMobile();\r\n    this.subscribeToBreakpoint();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  private setSize() {\r\n    switch (this.type) {\r\n      case 'wizard':\r\n        this.width = '6.8rem';\r\n        this.height = '9rem';\r\n        break;\r\n      case 'status':\r\n        break;\r\n      case 'step':\r\n        this.width = `${this.size}rem`;\r\n        this.height = `${this.stepHeight}rem`;\r\n        break;\r\n      default:\r\n        this.width = `${this.size * (this.divider || 1)}rem`;\r\n        this.height = `${this.size}rem`;\r\n    }\r\n  }\r\n\r\n  private subscribeToBreakpoint() {\r\n    this.subscription = this.mobile$\r\n      .pipe(\r\n        switchMap((mobile: boolean) => {\r\n          this.stepHeight = mobile ? 6 : 12;\r\n          if (this.step) {\r\n            return this.step.getActiveObs().pipe(\r\n              map((active: boolean) => {\r\n                if (mobile && this.type === 'step') {\r\n                  this.size = active ? 2.5 : 1.6;\r\n                }\r\n                this.setSize();\r\n              })\r\n            );\r\n          }\r\n\r\n          return of(true);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "selector": "[appSize]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "divider",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "size",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "space",
                    "line": 23,
                    "type": "number"
                },
                {
                    "name": "step",
                    "line": 19,
                    "type": "CardStepModel"
                },
                {
                    "name": "type",
                    "line": 21,
                    "type": "StepType"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.height",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "style.width",
                    "line": 30,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "mobile$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "stepHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "setSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subscribeToBreakpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointService",
                        "type": "BreakpointService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "breakpointService",
                        "type": "BreakpointService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UnderlineDirective",
            "id": "directive-UnderlineDirective-99a0d2ac8403d548c01b31f9f345665e",
            "file": "projects/kakal-ui/src/lib/directives/underline.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\nimport { Palette, palette } from 'src/styles/theme';\r\n\r\n@Directive({\r\n  selector: '[appUnderline]',\r\n})\r\nexport class UnderlineDirective {\r\n  private palette = palette;\r\n\r\n  @Input() color: Palette;\r\n  @Input() thick: number;\r\n  @Input() pattern: 'solid' | 'dotted';\r\n\r\n  @HostBinding('style.border-bottom') private underline: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.underline = `${this.thick || 1}px ${this.pattern || 'solid'} ${this.palette[this.color || 'primary']}`;\r\n  }\r\n}\r\n",
            "selector": "[appUnderline]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "color",
                    "line": 10,
                    "type": "Palette"
                },
                {
                    "name": "pattern",
                    "line": 12,
                    "type": "\"solid\" | \"dotted\""
                },
                {
                    "name": "thick",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.border-bottom",
                    "line": 14,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "palette",
                    "defaultValue": "palette",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            }
        },
        {
            "name": "VariantDirective",
            "id": "directive-VariantDirective-22905ef5f152b6013929b39d9e4920c4",
            "file": "projects/kakal-ui/src/lib/directives/variant.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, HostBinding } from '@angular/core';\r\nimport { StepVariant, StepType } from '../components/cards/card-step/card-step.model';\r\n\r\n@Directive({\r\n  selector: '[appVariant]',\r\n})\r\nexport class VariantDirective {\r\n  @Input() variant: StepVariant = 'circle';\r\n  @Input() type: StepType;\r\n\r\n  @HostBinding('style.border') private border: string;\r\n  @HostBinding('style.border-radius') private radius: string;\r\n  @HostBinding('style.box-shadow') private boxShadow: string;\r\n  @HostBinding('style.background') private background: string;\r\n  @HostBinding('style.background-color') private backgroundColor: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n    switch (this.variant) {\r\n      case 'circle':\r\n\r\n        this.radius = `${5}rem`;\r\n\r\n        switch (this.type) {\r\n\r\n          case 'step':\r\n            this.boxShadow =\r\n              '0px 3px 3px 1px #dadada, 0px 0px 0px 9px #ececec !important';\r\n            this.background = `linear-gradient(\r\n          0deg, #eeeeee 0%, #fefefe 100%`;\r\n\r\n            break;\r\n\r\n          case 'status':\r\n            this.boxShadow = '0px 0px 0px 6px #ffffff !important';\r\n            this.backgroundColor = '#ffffff !important';\r\n            this.border = `1px solid #00000029`;\r\n            break;\r\n        }\r\n\r\n        break\r\n\r\n      case 'square':\r\n\r\n        switch (this.type) {\r\n\r\n          case 'step':\r\n            this.boxShadow =\r\n              '0px 3px 3px 1px #dadada, 0px 0px 0px 9px #ececec !important';\r\n            this.background = `linear-gradient(\r\n          0deg, #eeeeee 0%, #fefefe 100%`;\r\n            break\r\n        }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n",
            "selector": "[appVariant]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "type",
                    "line": 9,
                    "type": "StepType"
                },
                {
                    "name": "variant",
                    "defaultValue": "'circle'",
                    "line": 8,
                    "type": "StepVariant"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.background",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "style.background-color",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "style.border",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "style.border-radius",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "style.box-shadow",
                    "line": 13,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            }
        },
        {
            "name": "WizardDirective",
            "id": "directive-WizardDirective-57518a5c7ee6ee2f1e1e116c4291e839",
            "file": "projects/kakal-ui/src/lib/directives/wizard.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appWizard]',\r\n})\r\nexport class WizardDirective {\r\n  @Input() cards: number = 4;\r\n\r\n  @HostBinding('style.height') private height: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.height = this.setHeight() + 'rem';\r\n  }\r\n\r\n  private setHeight() {\r\n    return this.cards * 7 + 9;\r\n  }\r\n}\r\n",
            "selector": "[appWizard]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "cards",
                    "defaultValue": "4",
                    "line": 7,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.height",
                    "line": 9,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "setHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4688b9be3f2cc4a94709b9bc394f7917",
            "file": "projects/kakal-ui/src/lib/button/button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kkl-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bordersLeft",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "bordersRight",
                    "defaultValue": "true",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string | null"
                },
                {
                    "name": "noShadow",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "pink",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kkl-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input('label') label: string | null;\r\n  @Input('pink') pink: boolean;\r\n  @Input('noShadow') noShadow: boolean;\r\n  @Input('bordersLeft') bordersLeft: boolean = true;\r\n  @Input('bordersRight') bordersRight: boolean = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utils'; // TODO: create an alias to avoid '../' paths\r\n\r\n:host { \r\n  display: inline-block;\r\n}\r\n\r\nbutton {\r\n  background: $primary-col;\r\n  padding: 1rem 2rem;\r\n  border-radius: $button-radius;\r\n  appearance: none;\r\n  border: 0;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  font-size: 1.5rem;\r\n  letter-spacing: 1px;\r\n  color: $primary-col-text;\r\n  box-shadow: $pl-button-shadow;\r\n  cursor: pointer;\r\n\r\n  &.make-pink {\r\n    background: #ff00a2;\r\n    box-shadow: $pl-button-shadow-alt;\r\n  }\r\n\r\n  &.rm-right-borders {\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n  }\r\n\r\n  &.rm-left-borders {\r\n    border-top-left-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n  }\r\n\r\n  &.no-shadow {\r\n    box-shadow: none;\r\n  }\r\n}\r\n\r\n\r\n\r\n// .make-pink {\r\n//   background: #ff00a2;\r\n//   box-shadow: 0 4px 10px rgba(55, 55, 55, 0.3), 0 6px 35px rgb(200 55 150 / 70%);\r\n// }",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button \r\n    [attr.is-pink]=\"pink\" \r\n    [ngClass]=\"{'make-pink': pink, 'rm-left-borders': !bordersLeft, 'rm-right-borders': !bordersRight, 'no-shadow': noShadow}\">\r\n    {{label ? label : \"No Label provided 🧐\"}}\r\n</button>"
        },
        {
            "name": "ButtonsetComponent",
            "id": "component-ButtonsetComponent-ae1214cdca9d2da47c646a167dd75f27",
            "file": "projects/kakal-ui/src/lib/buttonset/buttonset.component.ts",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kkl-buttonset",
            "styleUrls": [
                "./buttonset.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./buttonset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kkl-buttonset',\r\n  templateUrl: './buttonset.component.html',\r\n  styleUrls: ['./buttonset.component.scss'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class ButtonsetComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utils'; // TODO: create alias to make this shorter\r\n\r\n:host {\r\n    display: inline-block;\r\n    padding: 1.5em;\r\n    border: 3px solid $primary-col;\r\n}\r\n\r\n.buttonset {\r\n    display: inline-block;\r\n    border-radius: $button-radius;\r\n    box-shadow: $pl-button-shadow;\r\n}",
                    "styleUrl": "./buttonset.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"buttonset\">\r\n    <pl-button label=\"Button 1\" [bordersRight]=\"false\" noShadow=true></pl-button>\r\n    <pl-button label=\"Button 2\" [bordersLeft]=\"false\" [bordersRight]=\"false\" [noShadow]=\"true\"></pl-button>\r\n    <pl-button label=\"Button 3\" [bordersLeft]=\"false\" [noShadow]=\"true\"></pl-button>\r\n</div>"
        },
        {
            "name": "KakalUiComponent",
            "id": "component-KakalUiComponent-2a1999e016266653d0ad693021c7ef2d",
            "file": "projects/kakal-ui/src/lib/kakal-ui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kkl-kakal-ui",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  kakal-ui works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kkl-kakal-ui',\r\n  template: `\r\n    <p>\r\n      kakal-ui works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class KakalUiComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "KakalUiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AreaPipe"
                        },
                        {
                            "name": "BorderDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonDirective"
                        },
                        {
                            "name": "ButtonsetComponent"
                        },
                        {
                            "name": "CellDirective"
                        },
                        {
                            "name": "FormatPipe"
                        },
                        {
                            "name": "KakalUiComponent"
                        },
                        {
                            "name": "LocationPipe"
                        },
                        {
                            "name": "OutsideDirective"
                        },
                        {
                            "name": "PrefixPipe"
                        },
                        {
                            "name": "RangePipe"
                        },
                        {
                            "name": "SizeDirective"
                        },
                        {
                            "name": "UnderlineDirective"
                        },
                        {
                            "name": "VariantDirective"
                        },
                        {
                            "name": "WizardDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AreaPipe"
                        },
                        {
                            "name": "BorderDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonDirective"
                        },
                        {
                            "name": "ButtonsetComponent"
                        },
                        {
                            "name": "CellDirective"
                        },
                        {
                            "name": "FormatPipe"
                        },
                        {
                            "name": "KakalUiComponent"
                        },
                        {
                            "name": "LocationPipe"
                        },
                        {
                            "name": "OutsideDirective"
                        },
                        {
                            "name": "PrefixPipe"
                        },
                        {
                            "name": "RangePipe"
                        },
                        {
                            "name": "SizeDirective"
                        },
                        {
                            "name": "UnderlineDirective"
                        },
                        {
                            "name": "VariantDirective"
                        },
                        {
                            "name": "WizardDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ButtonsetSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Buttonset.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/kakal-ui/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "exportDirective",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  BorderDirective,\r\n  ButtonDirective,\r\n  CellDirective,\r\n  OutsideDirective,\r\n  SizeDirective,\r\n  UnderlineDirective,\r\n  VariantDirective,\r\n  WizardDirective,\r\n]"
            },
            {
                "name": "exportPipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                "type": "[]",
                "defaultValue": "[AreaPipe, FormatPipe, LocationPipe, PrefixPipe, RangePipe]"
            },
            {
                "name": "FancyBlueButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FancyPinkButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/kakal-ui/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Buttonset.stories.ts",
                "type": "Story<ButtonsetComponent>",
                "defaultValue": "(args: ButtonsetComponent) => ({\r\n  component: ButtonsetComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "LocationFormats",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"c-d\" | \"c-d-s\"",
                "file": "projects/kakal-ui/src/lib/pipes/location.pipe.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "stories/Buttonset.stories.ts": [
                {
                    "name": "ButtonsetSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Buttonset.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Buttonset.stories.ts",
                    "type": "Story<ButtonsetComponent>",
                    "defaultValue": "(args: ButtonsetComponent) => ({\r\n  component: ButtonsetComponent,\r\n  props: args,\r\n})"
                }
            ],
            "projects/kakal-ui/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/kakal-ui/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/kakal-ui/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/kakal-ui/src/lib/kakal-ui.module.ts": [
                {
                    "name": "exportDirective",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  BorderDirective,\r\n  ButtonDirective,\r\n  CellDirective,\r\n  OutsideDirective,\r\n  SizeDirective,\r\n  UnderlineDirective,\r\n  VariantDirective,\r\n  WizardDirective,\r\n]"
                },
                {
                    "name": "exportPipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                    "type": "[]",
                    "defaultValue": "[AreaPipe, FormatPipe, LocationPipe, PrefixPipe, RangePipe]"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "FancyBlueButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FancyPinkButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/kakal-ui/src/lib/pipes/location.pipe.ts": [
                {
                    "name": "LocationFormats",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"c-d\" | \"c-d-s\"",
                    "file": "projects/kakal-ui/src/lib/pipes/location.pipe.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/kakal-ui/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/buttonset/buttonset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/border.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BorderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/cell.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CellDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/flexStart.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FlexStartDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/size.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SizeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/underline.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UnderlineDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/variant.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "VariantDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/directives/wizard.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WizardDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/kakal-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KakalUiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/kakal-ui.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportPipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/kakal-ui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "KakalUiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/pipes/area.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AreaPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/pipes/format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/pipes/location.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LocationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/pipes/prefix.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PrefixPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/lib/pipes/range.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RangePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/kakal-ui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FancyBlueButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FancyPinkButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Buttonset.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonsetSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Buttonset.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}