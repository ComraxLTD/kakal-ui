{"version":3,"file":"main.b7bb7360f5d3879d3764.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AAOA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AACA;AAEA;AAIA;AACA;AAYA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA3IA;AALA;AACA;AACA;AACA;AACA;AAyBA;AALA;AAnBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AAKA;AAMA;AAAA;AAAA;AALA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5DA;AAHA;AACA;AACA;AAOA;AANA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/examples/layout-ex/layout-ex.component.ts","webpack://lib-kakal-ui/./src/lib/app/utilities/services/route.service.ts"],"sourcesContent":["import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { CardStepModel, StepperDirection } from '../../components/cards/card-step/card-step.model';\r\nimport { IconModel } from '../../components/icon/icon.model';\r\nimport { MenuModel } from '../../components/menu/menu.model';\r\nimport { MenuService } from '../../components/menu/menu.service';\r\nimport { NavbarService } from '../../components/navbar/navbar.service';\r\nimport { StepperService } from '../../components/stepper/stepper.service';\r\nimport { LayoutService } from '../../screens/layout/layout.service';\r\nimport { RouterService } from '../../utilities/services/route.service';\r\n\r\n@Component({\r\n  selector: 'app-layout-ex',\r\n  template: (require('./layout-ex.component.html').default || require('./layout-ex.component.html')).length ? (require('./layout-ex.component.html').default || require('./layout-ex.component.html')) : '',\r\n  styles: [(require('./layout-ex.component.scss').default || require('./layout-ex.component.scss')).length ? (require('./layout-ex.component.scss').default || require('./layout-ex.component.scss')) : '']\r\n})\r\nexport class LayoutExComponent implements OnInit {\r\n\r\n  private pathSubscription: Subscription;\r\n\r\n  // NAVBAR SECTION\r\n  private headers = { lands: 'מקרקעין', neches: 'מנהלת ספר נכסים' };\r\n  public openIcon: string = 'treegradientlands';\r\n  public logos: IconModel[];\r\n  public showStatusPath: string[] = [this.projectPrefix, 'neches'];\r\n\r\n  // WIZARD SECTION\r\n  public steps$: Observable<CardStepModel[]>;\r\n  public direction: StepperDirection = 'column';\r\n  public hideWizardPath: string[] = ['results', this.projectPrefix];\r\n\r\n  // MENU SECTION\r\n  public menu$: Observable<MenuModel[]>;\r\n\r\n  constructor(\r\n    private landService: LandService,\r\n    private menuService: MenuService,\r\n    private navbarService: NavbarService,\r\n    private layoutService: LayoutService,\r\n    private routerService: RouterService,\r\n    @Inject(PROJECT_PREFIX) public projectPrefix: string\r\n  ) { }\r\n\r\n\r\n  // ROUTE METHODS SECTION\r\n  private setCurrentPath() {\r\n    const path = this.routerService.getCurrentPath();\r\n    this.layoutService.emitCurrentPath(path)\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.setCurrentPath()\r\n    this.setNavbar()\r\n    this.steps$ = this.setWizard()\r\n    this.menu$ = this.setMenu()\r\n    this.subscribeToRouter();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n\r\n    if (this.pathSubscription) {\r\n      this.pathSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private setNavbar() {\r\n    this.navbarService.setHeaders(this.headers)\r\n    this.navbarService.emitStatus(this.landService.status);\r\n    this.navbarService.setHeadersObs(this.setHeaders())\r\n    this.logos = this.landService.logos;\r\n  }\r\n\r\n  private setHeaders() {\r\n    return this.routerService\r\n      .getModulePrefixObs().pipe(\r\n        distinctUntilChanged(),\r\n        map((path: string) => this.headers[path]\r\n        ))\r\n  }\r\n\r\n  private subscribeToRouter() {\r\n    this.pathSubscription = this.routerService\r\n      .getLastPathObs()\r\n      .subscribe(\r\n        (path: string) => {\r\n          path === this.projectPrefix && this.navbarService.emitTitle(path);\r\n          this.layoutService.emitCurrentPath(path)\r\n          this.routerService.currentPath$.next(path)\r\n        }\r\n      );\r\n  }\r\n\r\n  private setWizard() {\r\n\r\n    return this.routerService\r\n      .getModulePrefixObs().pipe(\r\n        map((path: string) => {\r\n\r\n          const steps = this.landService.getSteps()\r\n\r\n          steps.map((step) => {\r\n            if (step.isActive) {\r\n              step.unactive()\r\n            }\r\n            if (step.path === path) {\r\n              step.active()\r\n            }\r\n\r\n          })\r\n\r\n\r\n          return steps\r\n        }))\r\n\r\n  }\r\n\r\n  private setMenu() {\r\n\r\n    const modulePath$ = this.routerService.getModulePrefixObs()\r\n    const lastPath$ = this.layoutService.getCurrentPathObs()\r\n\r\n    return modulePath$.pipe(\r\n      switchMap((modulePath: string) => {\r\n        return lastPath$.pipe(\r\n          map((path: string) => {\r\n            const menu = this.menuService.setMenu(this.menuService.getMenu(), modulePath, 'path', path)\r\n            return menu\r\n          })\r\n        )\r\n      })\r\n    )\r\n\r\n    // return path$.pipe(\r\n    //   // distinctUntilChanged(),\r\n    //   map((path: string) => {\r\n    //     console.log(path)\r\n    //     return this.menuService.setList(this.menuService.getMenu(), 'path', path);\r\n\r\n\r\n    //   })\r\n    // )\r\n  }\r\n\r\n\r\n  public onChangeModule(step: CardStepModel) {\r\n    const path: string = `${this.projectPrefix}/${step.path}`;\r\n    this.routerService.navigate(path);\r\n  }\r\n\r\n  public onChangeMenu(path  :string) {\r\n    path = `${this.projectPrefix}/${path}`;\r\n    this.routerService.navigate(path);\r\n\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RouterService {\r\n  private $modulePrefix: Subject<string> = new Subject();\r\n\r\n  public currentRoute: string;\r\n  public history: string[] = [];\r\n\r\n  constructor(private router: Router, private location: Location) {\r\n    this.subscribeToRoute()\r\n  }\r\n\r\n  public goBack() {\r\n    this.history.pop();\r\n    if (this.history.length > 0) {\r\n      this.location.back();\r\n    } else {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  public getCurrentPath(): string {\r\n    return this.setLastPath(this.router.url);\r\n  }\r\n\r\n  public subscribeToRoute(): Observable<string> {\r\n    return this.router.events.pipe(\r\n      filter((event) => event instanceof NavigationEnd),\r\n      map((event: any) => {\r\n        this.history.push(event.urlAfterRedirects);\r\n        this.currentRoute = event.utl;\r\n        return event.url;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getLastPathObs(): Observable<string> {\r\n    return this.subscribeToRoute().pipe(\r\n      map((path: string) => this.setLastPath(path))\r\n    );\r\n  }\r\n\r\n  public async navigate(path: string) {\r\n    try {\r\n      await this.router.navigateByUrl(path);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  public setLastPath(url: string) {\r\n    const path = url.split('/');\r\n    return path[path.length - 1];\r\n  }\r\n\r\n  public getModulePrefixObs(): Observable<string> {\r\n    return this.$modulePrefix.asObservable();\r\n  }\r\n\r\n  public emitModulePrefix(path: string): void {\r\n    this.$modulePrefix.next(path);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}