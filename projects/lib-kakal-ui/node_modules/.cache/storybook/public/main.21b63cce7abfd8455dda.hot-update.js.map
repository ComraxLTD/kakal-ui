{"version":3,"file":"main.21b63cce7abfd8455dda.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtGA;AAQA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAlEA;AAHA;AACA;AACA;;AACA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/stories/screens/Layout.stories.ts","webpack://lib-kakal-ui/./src/lib/app/components/menu/menu.service.ts"],"sourcesContent":["import { CardDashboardModel } from '../../app/components/cards/card-dashboard/card-dashboard.model';\r\nimport { moduleMetadata, Story, Meta } from '@storybook/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../../material/material.module';\r\n\r\nimport { SizeDirective } from '../../app/utilities/directives/size.directive';\r\nimport { IconComponent } from '../../app/components/icon/icon.component';\r\nimport { ClassesDirective } from '../../app/utilities/directives/classes.directive';\r\nimport { VariantDirective } from '../../app/utilities/directives/variant.directive';\r\nimport { TypographyComponent } from '../../app/components/typography/typography.component';\r\nimport { ButtonDirective } from '../../app/utilities/directives/button.directive';\r\nimport { ColorDirective } from '../../app/utilities/directives/color.directive';\r\nimport { DashboardExComponent } from '../../app/examples/dashboard-ex/dashboard-ex.component';\r\nimport { CardDashboardComponent } from '../../app/components/cards/card-dashboard/card-dashboard.component';\r\nimport { BreakpointService } from '../../app/utilities/services/breakpoint.service';\r\nimport { DashboardComponent } from '../../app/screens/dashboard/dashboard.component';\r\nimport { LayoutComponent } from '../../app/screens/layout/layout.component';\r\nimport { CardWizardComponent } from '../../app/components/cards/card-wizard/card-wizard.component';\r\nimport { MenuItemComponent } from '../../app/components/menu-item/menu-item.component';\r\nimport { MenuComponent } from '../../app/components/menu/menu.component';\r\nimport { NavbarComponent } from '../../app/components/navigation/navbar/navbar.component';\r\nimport { StepperComponent } from '../../app/components/stepper/stepper.component';\r\nimport { MenuService } from '../../app/components/menu/menu.service';\r\nimport { LayoutService } from '../../app/screens/layout/layout.service';\r\n\r\nexport default {\r\n  title: 'Screen - Layout',\r\n  component: DashboardExComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [\r\n        IconComponent,\r\n        TypographyComponent,\r\n\r\n        LayoutComponent,\r\n        NavbarComponent,\r\n        StepperComponent,\r\n        MenuComponent,\r\n        MenuItemComponent,\r\n        CardWizardComponent,\r\n\r\n        SizeDirective,\r\n        VariantDirective,\r\n        ClassesDirective,\r\n        ButtonDirective,\r\n        ColorDirective,\r\n      ],\r\n\r\n      providers: [LayoutService, NavbarServicem MenuService, BreakpointService],\r\n      imports: [CommonModule, MaterialModule],\r\n    }),\r\n  ],\r\n} as Meta;\r\n\r\nconst Template: Story<DashboardExComponent> = (args: DashboardExComponent) => ({\r\n  props: args,\r\n});\r\n\r\nexport const Dashboard = Template.bind({});\r\n\r\nDashboard.args = {\r\n  cards: [\r\n    new CardDashboardModel({\r\n      label: 'פירוט הנכס',\r\n      svgUrl: 'home',\r\n      path: 'details',\r\n    }),\r\n    new CardDashboardModel({\r\n      label: 'תנועות',\r\n      svgUrl: 'list',\r\n      path: 'movements',\r\n    }),\r\n    new CardDashboardModel({\r\n      label: 'עסקאות',\r\n      svgUrl: 'transactions',\r\n      path: 'transactions',\r\n    }),\r\n    new CardDashboardModel({\r\n      label: 'תתי חלקה',\r\n      svgUrl: 'building',\r\n      path: 'subdivision',\r\n    }),\r\n  ],\r\n  width: 50\r\n};\r\n\r\nexport const Foresrty = Template.bind({});\r\n\r\nForesrty.args = {\r\n  cards: [\r\n    new CardDashboardModel({\r\n      label: 'פירוט הנכס',\r\n      svgUrl: 'home',\r\n      path: 'details',\r\n    }),\r\n    new CardDashboardModel({\r\n      label: 'תנועות',\r\n      svgUrl: 'list',\r\n      path: 'movements',\r\n    }),\r\n  ],\r\n  width: 50\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { MenuModel } from './menu.model';\r\nimport { MenuItemModel } from '../menu-item/menu-item.model';\r\nimport { ListItemKeys } from '../list-item/list-item.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n\r\n  private menu: MenuModel[]\r\n  private modulePrefix: string;\r\n\r\n  constructor() {}\r\n\r\n  public getMenu() {\r\n    return [...this.menu];\r\n  }\r\n\r\n  public getPrefix(): string {\r\n    return this.modulePrefix;\r\n  }\r\n\r\n  public setPrefix(modulePrefix: string) {\r\n    this.modulePrefix = modulePrefix;\r\n  }\r\n\r\n  // METHODS TO HANDLE ACTIVE STEP STATUS\r\n  private activeStep(items: MenuItemModel[], key: ListItemKeys, value: any) {\r\n    items.find((item) => {\r\n      if (item[key] === value) {\r\n        item.active();\r\n      }\r\n    });\r\n  }\r\n\r\n  private unactiveStep(items: MenuItemModel[]) {\r\n    items.find((item) => {\r\n      if (item.isActive) {\r\n        item.unactive();\r\n      }\r\n    });\r\n  }\r\n\r\n  public setSteps(\r\n    items: MenuItemModel[],\r\n    key: ListItemKeys,\r\n    value: string\r\n  ): MenuItemModel[] {\r\n    this.unactiveStep(items);\r\n    this.activeStep(items, key, value);\r\n    return [...items];\r\n  }\r\n\r\n  public setList(\r\n    menu: MenuModel[],\r\n    key: ListItemKeys,\r\n    value: string\r\n  ): MenuModel[] {\r\n    const updateMenu = [...menu];\r\n\r\n    updateMenu.find((list) => {\r\n      if (list.prefix === this.modulePrefix) {\r\n        list.links = this.setSteps(list.links, key, value);\r\n      }\r\n    });\r\n    return updateMenu;\r\n  }\r\n\r\n  public findList(key: string, value: string): MenuModel {\r\n    return {\r\n      ...this.getMenu().find((list: MenuModel) => list[key] === value),\r\n    };\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}