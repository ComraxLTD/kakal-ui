{"version":3,"file":"main.b723c58e078867f5dbba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOA;AAiBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAVA;AALA;AACA;AACA;AACA;AACA;AAkBA;AAjBA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/components/icon/icon.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { Observable, BehaviorSubject, Subscription } from 'rxjs';\r\nimport { Palette } from '../../../styles/theme';\r\nimport { IconType } from './icon.model';\r\nimport { IconsService } from './icons.service';\r\n\r\n@Component({\r\n  selector: 'kkl-icon',\r\n  template: (require('./icon.component.html').default || require('./icon.component.html')).length ? (require('./icon.component.html').default || require('./icon.component.html')) : '',\r\n  styles: [(require('./icon.component.scss').default || require('./icon.component.scss')).length ? (require('./icon.component.scss').default || require('./icon.component.scss')) : ''],\r\n})\r\nexport class IconComponent implements OnInit {\r\n  @Input() public key: string;\r\n  @Input() public type: IconType;\r\n  @Input() public size: number;\r\n\r\n  @Input() public color: Palette;\r\n  @Input() public activeColor: Palette;\r\n\r\n  @Input() public active$: Observable<boolean>;\r\n\r\n  @Input() public backgroundColor: Palette;\r\n\r\n  public scale: string;\r\n  public color$: BehaviorSubject<Palette>;\r\n\r\n  private subscription: Subscription;\r\n\r\n  constructor(private iconsService: IconsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setIcon();\r\n    this.setColor();\r\n    this.setSize();\r\n    this.subscribeToActive();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private setIcon() {\r\n    const isSvg = this.iconsService.setIcon(this.key);\r\n    if (this.type) {\r\n      this.type = this.type;\r\n    } else {\r\n      this.type = isSvg ? 'svg' : 'mat';\r\n    }\r\n  }\r\n\r\n  private setColor() {\r\n    this.color$ = new BehaviorSubject<Palette>(this.color || 'default');\r\n  }\r\n\r\n  private setSize() {\r\n    this.scale = `scale(${this.size || 1})`;\r\n  }\r\n\r\n  private subscribeToActive() {\r\n    if (this.active$) {\r\n      this.subscription = this.active$.subscribe((active: boolean) => {\r\n        active\r\n          ? this.color$.next(this.activeColor || 'paper')\r\n          : this.color$.next(this.color);\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}