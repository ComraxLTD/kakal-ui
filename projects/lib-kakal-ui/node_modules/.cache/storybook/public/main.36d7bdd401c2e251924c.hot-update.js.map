{"version":3,"file":"main.36d7bdd401c2e251924c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AASA;AAqBA;AACA;AAZA;AAIA;AACA;AAEA;AACA;AACA;AAKA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAtFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAnBA;AALA;AACA;AACA;AACA;AACA;AAuBA;AAtBA;AAAA;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAEA;AAQA;AAuBA;AARA;AAIA;AAIA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AApDA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAGA;AAEA;AAAA;AAAA;AAAA;AAfA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/components/form/form-input/form-input.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/form/form/form.component.ts"],"sourcesContent":["import { MessageService } from '../services/message.service';\r\nimport { FormControl } from '@angular/forms';\r\nimport { QuestionBase } from '../services/form.service';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { QuestionSelectModel, SelectOption } from '../models/question-select.model';\r\nimport { GridProps } from '../models/question.model';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\n\r\n@Component({\r\n  selector: 'kkl-form-input',\r\n  template: (require('./form-input.component.html').default || require('./form-input.component.html')).length ? (require('./form-input.component.html').default || require('./form-input.component.html')) : '',\r\n  styles: [(require('./form-input.component.scss').default || require('./form-input.component.scss')).length ? (require('./form-input.component.scss').default || require('./form-input.component.scss')) : '']\r\n})\r\nexport class FormInputComponent implements OnInit {\r\n\r\n    @Input() public question: QuestionBase;\r\n  @Input() public control: FormControl;\r\n\r\n  public type: string;\r\n  public controlType: string;\r\n  public label: string;\r\n  public icon: string;\r\n  public options: SelectOption[]\r\n  public error: string = ''\r\n\r\n  public gridProps: GridProps\r\n  public color: string;\r\n  public iconType: string = 'svg';\r\n  public iconRotate: number = 0;\r\n\r\n  @Output() public selected: EventEmitter<QuestionSelectModel> = new EventEmitter();\r\n  @Output() public optionSelected: EventEmitter<MatAutocompleteSelectedEvent> = new EventEmitter()\r\n  @Output() autocomplete: EventEmitter<FormControl> = new EventEmitter()\r\n\r\n  constructor(\r\n    private messageService: MessageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.gridProps = this.question.gridProps\r\n    console.log(this.gridProps)\r\n    this.type = this.question?.type\r\n    this.controlType = this.question?.controlType\r\n    this.label = this.question?.label || ''\r\n    this.icon = this.question?.icon || ''\r\n\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.options = this.question.options;\r\n    }\r\n\r\n    this.subscribeToControl()\r\n  }\r\n\r\n  // subscription section\r\n  private subscribeToControl() {\r\n\r\n    if (this.control.disabled) {\r\n      this.color = 'disable';\r\n    }\r\n\r\n    this.control.valueChanges.subscribe((value) => {\r\n      if (this.control.disabled) {\r\n        this.color = 'disable';\r\n      } else if (this.control.errors) {\r\n        this.color = 'warn';\r\n      } else {\r\n        this.color = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  public validate() {\r\n    this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n\r\n    if (this.error) {\r\n      this.color = 'warn';\r\n    }\r\n\r\n    this.control.valueChanges.subscribe(() => {\r\n      this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n    });\r\n  }\r\n\r\n  public onSelectChange() {\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.selected.emit(this.question)\r\n      this.question.onSelectChange()\r\n    }\r\n  }\r\n  public onAutocomplete() {\r\n    this.autocomplete.emit(this.control)\r\n  }\r\n\r\n  public onOptionSelected(event: MatAutocompleteSelectedEvent) {\r\n    this.optionSelected.emit(event)\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { QuestionSelectModel } from '../models/question-select.model';\r\nimport { Observable } from 'rxjs';\r\nimport { GridProps } from '../models/question.model';\r\nimport { QuestionGroupModel } from '../models/question-group.model';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Question } from '../services/form.service';\r\n\r\n@Component({\r\n  selector: 'kkl-form',\r\n  template: (require('./form.component.html').default || require('./form.component.html')).length ? (require('./form.component.html').default || require('./form.component.html')) : '',\r\n  styles: [(require('./form.component.scss').default || require('./form.component.scss')).length ? (require('./form.component.scss').default || require('./form.component.scss')) : '']\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n\r\n  @Input() public group: QuestionGroupModel;\r\n  @Input() public questions: Question[];\r\n  @Input() public editMode: boolean;\r\n  @Input() public rowHeight: number;\r\n\r\n  @Input() private $questions: Observable<Question[]>;\r\n\r\n  @Input() public slots: {\r\n    button?: ElementRef;\r\n    group?: ElementRef;\r\n  };\r\n\r\n  @Output() register: EventEmitter<FormGroup> = new EventEmitter();\r\n\r\n  public formGroup: FormGroup;\r\n  public grid: GridProps;\r\n  public hasButton: boolean = false;\r\n  public cols: string | number;\r\n  public gutter: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.formGroup = this.group.formGroup;\r\n    this.questions = this.questions || this.group.questions;\r\n    this.grid = this.group.gridProps;\r\n    this.cols = this.group.gridProps?.cols || 1;\r\n    this.gutter = this.group.gridProps?.gutter || 1;\r\n    this.hasButton = this.group.hasButton || false;\r\n\r\n    if (this.group.formGroup) {\r\n    this.register.emit(this.formGroup);\r\n    }\r\n\r\n    if (this.editMode) {\r\n      this.formGroup.disable();\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.register.emit(this.formGroup.value);\r\n  }\r\n\r\n  private subscribeToFormValues() {\r\n    this.formGroup.valueChanges.subscribe((value) => {\r\n      this.register.emit(this.formGroup);\r\n    });\r\n  }\r\n\r\n  public onSelect(question: QuestionSelectModel) {\r\n    console.log(question);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}