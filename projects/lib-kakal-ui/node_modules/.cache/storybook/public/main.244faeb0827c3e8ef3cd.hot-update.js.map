{"version":3,"file":"main.244faeb0827c3e8ef3cd.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAivMA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAvDA;AAHA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;ACRA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAHA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjEA;AAYA;AAEA;AACA;AA0BA;AA0BA;AAAA;AAJA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3FA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAxBA;AANA;AACA;AACA;AACA;AACA;AACA;AA2BA;AA1BA;AAAA;;;;;;;;;;;;;;;;;;;;;ACzCA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAxGA;AAHA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAEA;AAOA;AAQA;AAEA;AACA;AAVA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.html","webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.html","webpack://lib-kakal-ui/./src/lib/stories/Table.stories.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/columns.service.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/models/column.model.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/table.service.ts","webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.ts"],"sourcesContent":["export default \"\";","export default \"<div>\\r\\n  <mat-table\\r\\n    (matSortChange)=\\\"onSort($event)\\\"\\r\\n    mat-table\\r\\n    matSort\\r\\n    [dataSource]=\\\"$data | async | paginate: pagination\\\"\\r\\n    [dir]=\\\"'rtl'\\\"\\r\\n  >\\r\\n    <ng-container\\r\\n      *ngFor=\\\"let column of tableColumns\\\"\\r\\n      [matColumnDef]=\\\"column.columnDef\\\"\\r\\n    >\\r\\n      <!-- COLUMN HEADER SECTION-->\\r\\n\\r\\n      <ng-container *ngIf=\\\"!column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        >\\r\\n          <!-- DEFAULT HEADER -->\\r\\n          <app-typography [bold]=\\\"600\\\" *ngIf=\\\"!column.filterable\\\">\\r\\n            {{ column.label }}\\r\\n          </app-typography>\\r\\n\\r\\n          <ng-container\\r\\n            *ngIf=\\\"column.columnDef === 'actions' && column.slotRef\\\"\\r\\n          >\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\\"\\r\\n                headerSlots[column.columnDef];\\r\\n                context: { $implicit: column }\\r\\n              \\\"\\r\\n            >\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- FILTER HEADER -->\\r\\n          <app-column-filter\\r\\n            *ngIf=\\\"column.filterable\\\"\\r\\n            [column]=\\\"column\\\"\\r\\n          ></app-column-filter>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- SORT HEADER -->\\r\\n      <ng-container *ngIf=\\\"column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          mat-sort-header\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n          [start]=\\\"column.sortDir\\\"\\r\\n        >\\r\\n          <app-typography [bold]=\\\"600\\\" [size]=\\\"1.2\\\">\\r\\n            {{ column.label }}\\r\\n          </app-typography>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- COLUMN CELL SECTION-->\\r\\n\\r\\n      <mat-cell\\r\\n        *matCellDef=\\\"let cell; let i = index\\\"\\r\\n        [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        [attr.colspan]=\\\"i\\\"\\r\\n      >\\r\\n        <!-- DEFAULT SECTION-->\\r\\n        <ng-container *ngIf=\\\"!cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchCase=\\\"'custom'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots[column.columnDef];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <app-typography>\\r\\n                {{ cell.item[column.columnDef] | format: type }}\\r\\n              </app-typography>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- FORM SECTION-->\\r\\n        <ng-container *ngIf=\\\"cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <div class=\\\"cell-input\\\">\\r\\n                <app-column-form\\r\\n                  *ngIf=\\\"column?.question\\\"\\r\\n                  [control]=\\\"cell.formGroup.controls[column.columnDef]\\\"\\r\\n                  [question]=\\\"column?.question\\\"\\r\\n                ></app-column-form>\\r\\n              </div>\\r\\n            </ng-container>\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <mat-header-row\\r\\n      [ngClass]=\\\"[theme]\\\"\\r\\n      *matHeaderRowDef=\\\"columnDefs\\\"\\r\\n    ></mat-header-row>\\r\\n\\r\\n    <mat-row\\r\\n      *matRowDef=\\\"let row; columns: columnDefs\\\"\\r\\n      (click)=\\\"onRowClicked(row)\\\"\\r\\n    ></mat-row>\\r\\n  </mat-table>\\r\\n\\r\\n  <app-pagination [pagination]=\\\"pagination\\\"></app-pagination>\\r\\n</div>\\r\\n\";","export default \"<div class=\\\"container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <div class=\\\"table\\\">\\r\\n    <app-table\\r\\n      [data]=\\\"data\\\"\\r\\n      [columns]=\\\"columns\\\"\\r\\n      [model]=\\\"model\\\"\\r\\n      [options]=\\\"options\\\"\\r\\n      [rowSlots]=\\\"{status}\\\"\\r\\n    ></app-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #status let-cell=\\\"cell\\\">\\r\\n  <div class=\\\"status\\\">\\r\\n    <app-status [status]=\\\"cell.item?.status\\\"></app-status>\\r\\n  </div>\\r\\n</ng-template>\\r\\n`;\\r\\n\";","import { moduleMetadata, Story, Meta } from '@storybook/angular';\r\n<<<<<<< HEAD\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from '../app/components/table/table.component';\r\nimport { ColumnModel, ColumnType } from '../app/components/table/models/column.model';\r\nimport { AssetsModel } from '../app/utilities/models/assets.model';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { PaginationComponent } from '../app/components/pagination/pagination.component';\r\nimport { MaterialModule } from '../material/material.module';\r\n=======\r\nimport { CommonModule, DatePipe, DecimalPipe } from '@angular/common';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { NgxPaginationModule, PaginationInstance } from 'ngx-pagination';\r\nimport { ColumnModel } from 'src/app/components/columns/column.model';\r\nimport { ColumnFilterComponent } from '../app/components/columns/column-filter/column-filter.component';\r\nimport { ColumnFormComponent } from '../app/components/columns/column-form/column-form.component';\r\nimport { ColumnsService } from '../app/components/columns/columns.service';\r\nimport { FormService } from '../app/components/form/services/form.service';\r\nimport { PaginationComponent } from '../app/components/pagination/pagination.component';\r\nimport { StatusComponent } from '../app/components/status/status.component';\r\nimport { TableComponent } from '../app/components/table/table.component';\r\nimport { TableService } from '../app/components/table/table.service';\r\n>>>>>>> 0ea86a898928442f71721f66e5722566192d4b00\r\nimport { TypographyComponent } from '../app/components/typography/typography.component';\r\nimport { TableExComponent } from '../app/examples/table-ex/table-ex.component';\r\nimport { ClassesDirective } from '../app/utilities/directives/classes.directive';\r\nimport { AssetsModel } from '../app/utilities/models/assets.model';\r\nimport { AreaPipe } from '../app/utilities/pipes/area.pipe';\r\nimport { FormatPipe } from '../app/utilities/pipes/format.pipe';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\nexport default {\r\n  title: 'Table',\r\n  component: TableExComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [\r\n        TableComponent,\r\n        StatusComponent,\r\n        ColumnFilterComponent,\r\n        ColumnFormComponent,\r\n        PaginationComponent,\r\n        TypographyComponent,\r\n        ClassesDirective,\r\n        FormatPipe,\r\n        AreaPipe,\r\n      ],\r\n      providers: [\r\n        FormService,\r\n        TableService,\r\n        ColumnsService,\r\n        FormatPipe,\r\n        AreaPipe,\r\n        DatePipe,\r\n        DecimalPipe,\r\n      ],\r\n      imports: [\r\n        ReactiveFormsModule,\r\n        BrowserAnimationsModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        NgxPaginationModule,\r\n        MaterialModule,\r\n      ],\r\n    }),\r\n  ],\r\n} as Meta;\r\n\r\nconst Template: Story<TableExComponent<any>> = (\r\n  args: TableExComponent<any>\r\n) => ({\r\n  props: args,\r\n});\r\n\r\nconst pagination: PaginationInstance = {\r\n  itemsPerPage: 6,\r\n  currentPage: 1,\r\n  totalItems: 12,\r\n};\r\n\r\nconst { data, columns, options } = {\r\n  data: [\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 10,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: 748,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לטיפול עורך דין',\r\n        value: 4,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'שוריין ע\"י פיננסים',\r\n        value: 5,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 24,\r\n      block: 24,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לרו\"ח',\r\n        value: 3,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 54,\r\n      subdivision: 0,\r\n      area: 1037,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'התקבלה עסקה חדשה',\r\n        value: 1,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 680,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לפיננסים',\r\n        value: 1,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: 748,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לטיפול עורך דין',\r\n        value: 4,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n  ],\r\n  columns: [\r\n    new ColumnModel({ label: 'גוש', type: 'number' }),\r\n    new ColumnModel({ label: 'חלקה', type: 'number' }),\r\n    new ColumnModel({ label: 'תת חלקה', type: 'number' }),\r\n    new ColumnModel({ label: 'שטח מ\"ר', type: 'number' }),\r\n    new ColumnModel({ label: 'שטח בבעלות הימנותא', type: 'number' }),\r\n    new ColumnModel({ label: 'זכות במס', type: 'text' }),\r\n    new ColumnModel({ label: 'סטטוס', type: 'custom', center: true }),\r\n    new ColumnModel({ label: 'תיאור', type: 'text' }),\r\n    new ColumnModel({ label: 'יישוב', type: 'text' }),\r\n  ],\r\n  options: {\r\n    pagination: pagination,\r\n    filters: ['id', '_constructor-name_'],\r\n  },\r\n};\r\n\r\nconst filterColumns = columns.map((column) => {\r\n  column.filterable = true;\r\n  column.filterOptions = [{ label: 'ex', value: 'ex' }];\r\n  return column;\r\n});\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n<<<<<<< HEAD\r\n=======\r\n  data: data,\r\n  columns: columns,\r\n  model: new AssetsModel(),\r\n  options: options,\r\n};\r\nexport const Filter = Template.bind({});\r\nFilter.args = {\r\n  data: data,\r\n  columns: [...filterColumns],\r\n  model: new AssetsModel(),\r\n  options: options,\r\n>>>>>>> 0ea86a898928442f71721f66e5722566192d4b00\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { ColumnModel } from './column.model';\r\n\r\nexport interface ColumnsData<T> {\r\n  columns: ColumnModel[];\r\n  columnsDefs: (string| keyof T)[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColumnsService<T> {\r\n  constructor() {}\r\n\r\n  private setColumnDefsFromType(model: T): string[] {\r\n    return Object.keys(model);\r\n  }\r\n\r\n  private filterColumnDefs(columnDefs: (string| keyof T)[], filters: [keyof T | string]): (string| keyof T)[] {\r\n    return columnDefs.filter((item) => !filters.includes(item));\r\n  }\r\n\r\n  private setColumnDefs(model: T, filters: [keyof T | string]): (string| keyof T)[] {\r\n    return this.filterColumnDefs(this.setColumnDefsFromType(model), filters);\r\n  }\r\n\r\n  private setColumnWithColumnDefs(\r\n    columns: ColumnModel[],\r\n    columnDefs:  (string| keyof T)[]\r\n  ): ColumnModel[] {\r\n    return columns.map((column, i) => {\r\n      return new ColumnModel({\r\n        ...column,\r\n        columnDef: column.columnDef || columnDefs[i],\r\n      });\r\n    });\r\n  }\r\n\r\n  private setColumnDefsFromColumns(\r\n    columns: ColumnModel[],\r\n    columnDefs: (string| keyof T)[]\r\n  ):  (string| keyof T)[] {\r\n    if (columns.length > columnDefs.length) {\r\n      columnDefs = columns.map((column) => column.columnDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private initColumnsDefs(model, filters):  (string| keyof T)[] {\r\n    return this.setColumnDefs(model, filters);\r\n  }\r\n\r\n  private getColumnsDefs(columns: ColumnModel[], columnDefs: (string| keyof T)[]) {\r\n    return this.setColumnDefsFromColumns(columns, columnDefs);\r\n  }\r\n\r\n  public getColumns(\r\n    model: T,\r\n    filters: (string| keyof T)[],\r\n    tableColumns: ColumnModel[]\r\n  ): ColumnsData<T> {\r\n    const columnsDefs = this.initColumnsDefs(model, filters);\r\n    const columns = this.setColumnWithColumnDefs(tableColumns, columnsDefs);\r\n\r\n    return { columns, columnsDefs: this.getColumnsDefs(columns, columnsDefs) };\r\n  }\r\n}\r\n","import { QuestionType } from '../../form/models/question-base.model';\r\nimport { SelectOption } from '../../form/models/question-select.model';\r\nimport { ElementRef } from \"@angular/core\";\r\nimport { FormService, Question } from '../../form/services/form.service';\r\nimport { ControlType } from '../../form/models/question.model';\r\nimport {FormBuilder} from \"@angular/forms\";\r\n\r\nexport declare type SortDir = 'desc' | 'asc';\r\n\r\nexport enum ColumnType {\r\n  NUMBER = 'number',\r\n  DATE = 'date',\r\n  TEXT = 'text',\r\n  CUSTOM = 'custom',\r\n  ACTIONS = 'actions',\r\n  EXPEND = 'expend',\r\n}\r\n\r\nexport class ColumnModel {\r\n  public columnDef?: any;\r\n  public label?: string;\r\n  public cell?: (element) => string;\r\n  public type?: ColumnType;\r\n  public control?: ControlType;\r\n  public question?: Question;\r\n  public slotRef?: ElementRef;\r\n  public center?: boolean;\r\n  public selectable?: boolean;\r\n  public sortable?: boolean;\r\n  public sortDir?: SortDir;\r\n  public filterable?: boolean;\r\n  public filterOptions?: SelectOption[];\r\n\r\n  private formService : FormService = new FormService(new FormBuilder())\r\n\r\n\r\n  constructor(options?: {\r\n    columnDef?: string;\r\n    label?: string;\r\n    cell?: (element) => string;\r\n    type?: ColumnType;\r\n    control?: ControlType;\r\n    question?: Question;\r\n    slotRef?: ElementRef;\r\n    selectable?: boolean;\r\n    center?: boolean;\r\n    sortable?: boolean;\r\n    sortDir?: SortDir;\r\n    filterable?: boolean;\r\n    filterOptions?: SelectOption[];\r\n  }) {\r\n    this.columnDef = options?.columnDef || '';\r\n    this.label = options?.label || '';\r\n    this.type = options?.type || ColumnType.TEXT;\r\n    this.cell = (element) => `${element[this.columnDef]}`;\r\n    this.control = options?.control;\r\n    this.question = options?.question;\r\n    this.slotRef = options?.slotRef || null;\r\n    this.center = options?.center || false;\r\n    this.selectable = options?.selectable || false;\r\n    this.sortable = options?.sortable || false;\r\n    this.sortDir = options?.sortDir || 'asc';\r\n    this.filterable = options?.filterable || false;\r\n    this.filterOptions = options?.filterOptions || [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { TableModel } from './models/table.model';\r\nimport { RowModel } from './models/row.model';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { TableService } from './table.service';\r\nimport { EditRow, TableDataSource } from './table-datasource';\r\nimport { ColumnModel } from './models/column.model';\r\n\r\ndeclare type id = string | number;\r\n\r\nexport interface TableOptions<T> {\r\n  filters?: (keyof T)[];\r\n  pagination?: PaginationInstance;\r\n  editable?: id[];\r\n  pending?: id[];\r\n}\r\n\r\nexport interface Table<T> {\r\n  columns: ColumnModel[];\r\n  data: T[];\r\n  options: TableOptions<T>;\r\n  model: T;\r\n  dataSource: TableDataSource<T>;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  template: (require('./table.component.html').default || require('./table.component.html')).length ? (require('./table.component.html').default || require('./table.component.html')) : '',\r\n  styles: [(require('./table.component.scss').default || require('./table.component.scss')).length ? (require('./table.component.scss').default || require('./table.component.scss')) : ''],\r\n  providers: [TableService, TableService],\r\n})\r\nexport class TableComponent<T> implements OnInit, Table<T> {\r\n  @Input() public theme: ThemePalette;\r\n\r\n  @Input() public data: T[];\r\n  @Input() public columns: ColumnModel[];\r\n  @Input() public model: T;\r\n  @Input() public options: TableOptions<T>;\r\n\r\n  @Input() public rowSlots: {};\r\n  @Input() public headerSlots: { headerActions: ElementRef };\r\n\r\n  private subscription: Subscription;\r\n\r\n  public dataSource: TableDataSource<T>;\r\n\r\n  public columnDefs: (string | keyof T)[];\r\n\r\n  public $data: Observable<RowModel<T>[]>;\r\n  public $columnDefs: Observable<string[]>;\r\n  public tableColumns: ColumnModel[];\r\n  public pagination: PaginationInstance;\r\n\r\n  @Output() register: EventEmitter<TableDataSource<T>> = new EventEmitter();\r\n  @Output() sort: EventEmitter<Sort> = new EventEmitter();\r\n  @Output() filter: EventEmitter<RowModel<T>> = new EventEmitter();\r\n\r\n  constructor(private tableService: TableService<T>) {}\r\n\r\n  ngOnInit() {\r\n    this.theme = this.theme || 'accent';\r\n    this.setTable();\r\n  }\r\n\r\n  private setTable() {\r\n    const { pagination, filters } = this.options;\r\n\r\n    this.dataSource = new TableDataSource<T>(this.data, this.options);\r\n\r\n    const data$ = this.dataSource.connectToRows();\r\n    const { columns, columnsDefs } = this.tableService.setColumns(\r\n      this.columns,\r\n      this.model,\r\n      [...filters]\r\n    );\r\n\r\n    this.$data = data$;\r\n    this.tableColumns = columns;\r\n    this.columnDefs = columnsDefs;\r\n    this.pagination = pagination;\r\n    this.register.emit(this.dataSource);\r\n\r\n    this.subscribeToRowEdit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public onRowClicked(row: T) {}\r\n\r\n  public onSort(sort: Sort) {\r\n    this.sort.emit(sort);\r\n  }\r\n\r\n  public onFilter(row: RowModel<T>) {\r\n    this.filter.emit(row);\r\n  }\r\n\r\n  public subscribeToRowEdit() {\r\n    this.subscription = this.dataSource\r\n      .connectEdit()\r\n      .subscribe((data: EditRow<T>) => {\r\n        const { row, options } = data;\r\n        const rows = this.dataSource.getRows();\r\n        const index = this.tableService.findRowIndex(rows, 'id', row.item);\r\n        const { editRow, columns } = this.tableService.onEditMode(\r\n          row,\r\n          this.tableColumns,\r\n          options\r\n        );\r\n\r\n        rows[index] = editRow;\r\n        this.tableColumns = columns;\r\n        this.dataSource.loadRows(rows);\r\n      });\r\n  }\r\n\r\n  private getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key];\r\n  }\r\n}\r\n","import { RowModel } from './models/row.model';\r\nimport { TableModel } from './models/table.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormService, Question } from '../form/services/form.service';\r\nimport { ColumnModel } from '../columns/column.model';\r\nimport { ColumnsService, ColumnsData } from '../columns/columns.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TableService<T> {\r\n  constructor(\r\n    private columnsService: ColumnsService<T>,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  public setColumns(\r\n    columns: ColumnModel[],\r\n    model: T,\r\n    filters: (string | keyof T)[]\r\n  ): ColumnsData<T> {\r\n    return this.columnsService.getColumns(model, filters, columns);\r\n  }\r\n\r\n  public findRowIndex(rows: RowModel<T>[], key: string, item?: T): number {\r\n    return rows.findIndex((row) => row.item[key] === item[key]);\r\n  }\r\n\r\n  private getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key];\r\n  }\r\n\r\n  // method to update form  data to table\r\n  public onSaveMode(\r\n    tableRows: RowModel<T>[],\r\n    key: string,\r\n    item?: T\r\n  ): RowModel<T>[] {\r\n    const rows = [...tableRows];\r\n    const index = this.findRowIndex(rows, key, item);\r\n    rows[index].editable = false;\r\n    rows[index].item = rows[index].formGroup.value;\r\n    return rows;\r\n  }\r\n\r\n  public onAddFormRow(table: TableModel<T>) {\r\n    const row: RowModel<T> = new RowModel<T>();\r\n    table.rows.unshift(row);\r\n    // this.onEditMode(row, table, 0);\r\n  }\r\n\r\n  public onEditTable(row : RowModel<T>, tableRows, tableColumns, index,  options?) {\r\n    const { editRow, columns } = this.onEditMode(row, tableColumns, options);\r\n    const rows = [...tableRows]\r\n    rows[index] = editRow;\r\n    return { rows, columns };\r\n  }\r\n\r\n  private updateRow(row: RowModel<T>, questions: Question[]): RowModel<T> {\r\n    const editRow = new RowModel({ ...row });\r\n    editRow.editable = true;\r\n    editRow.formGroup = this.formService.setFormGroup(questions);\r\n    return editRow;\r\n  }\r\n\r\n  public onEditMode(\r\n    row: RowModel<T>,\r\n    tableColumns: ColumnModel[],\r\n    editOptions?: any\r\n  ) {\r\n    const questions = this.setQuestions(tableColumns);\r\n    const columns = this.updateColumns(tableColumns, questions);\r\n    const editRow = this.updateRow(row, questions);\r\n    editRow.formGroup.patchValue({ ...editRow.item, ...editOptions });\r\n\r\n    return { editRow, columns };\r\n  }\r\n\r\n  private updateColumns(tableColumns, questions): ColumnModel[] {\r\n    return tableColumns.map((column, i) => {\r\n      return {\r\n        ...column,\r\n        question: questions.find(\r\n          (question) => question.key === column.columnDef\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  // method to update form inputs on edit mode\r\n  public updateFormState(row: RowModel<T>, options?: any) {\r\n    const { formGroup, item } = row;\r\n    formGroup.patchValue({ ...item, ...options });\r\n    return formGroup;\r\n  }\r\n\r\n  public setQuestions(tableColumns: ColumnModel[]): Question[] {\r\n    const columns = tableColumns;\r\n\r\n    if (columns) {\r\n      return columns\r\n        .filter((column) => column.type !== 'actions')\r\n        .map((column: ColumnModel) => {\r\n          const question = this.formService.setQuestion(column.control, {\r\n            key: column.columnDef,\r\n            label: column.label,\r\n          });\r\n          return question;\r\n        });\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ColumnModel } from 'src/app/components/columns/column.model';\r\nimport { TableOptions } from 'src/app/components/table/table.component';\r\n\r\n@Component({\r\n  selector: 'app-table-ex',\r\n  template: (require('./table-ex.component.html').default || require('./table-ex.component.html')).length ? (require('./table-ex.component.html').default || require('./table-ex.component.html')) : '',\r\n  styles: [(require('./table-ex.component.scss').default || require('./table-ex.component.scss')).length ? (require('./table-ex.component.scss').default || require('./table-ex.component.scss')) : ''],\r\n})\r\nexport class TableExComponent<T> implements OnInit {\r\n  @Input() public theme: ThemePalette;\r\n\r\n  @Input() public data: T[];\r\n  @Input() public columns: ColumnModel[];\r\n  @Input() public model: T;\r\n  @Input() public options: TableOptions<T>;\r\n  \r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n"],"names":[],"sourceRoot":""}