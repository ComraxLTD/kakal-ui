{"version":3,"file":"main.eea3598ec1d07d697775.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;ACAA;AAEA;AAMA;AAOA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAJA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AAOA;AAkBA;AACA;AAVA;AAGA;AACA;AAEA;AACA;AAKA;AAEA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AA5EA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAhBA;AALA;AACA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.html","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-filter/column-filter.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-form/column-form.component.ts"],"sourcesContent":["export default \"* {\\n  font-family: \\\"open sans hebrew\\\" !important;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n}\\n\\nhtml,\\nbody,\\napp-root,\\n#root {\\n  height: 100%;\\n  box-sizing: border-box;\\n  font-size: 10px;\\n}\\n\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \\\"open sans hebrew\\\", \\\"Helvetica Neue\\\", sans-serif;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n  box-sizing: border-box;\\n}\\n\\n::ng-deep mat-grid-list,\\nmat-grid-tile {\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.material-icons {\\n  font-family: \\\"Material Icons\\\" !important;\\n}\\n\\n@media screen and (max-width: 1280px) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (landscape) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (portrait) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\\n  html {\\n    font-size: 10px;\\n  }\\n}\\nmat-table {\\n  width: 100%;\\n  height: 100%;\\n  background-color: transparent !important;\\n}\\n\\nmat-cell {\\n  height: inherit;\\n}\\nmat-cell.center {\\n  justify-content: center;\\n}\\n\\nmat-header-cell.center {\\n  justify-content: center;\\n}\\n\\nmat-header-row.accent {\\n  border-bottom: #ff6f2e solid 3px;\\n}\\n\\nmat-header-row.primary {\\n  border-bottom: #d6a348 solid 3px;\\n}\\n\\nmat-row {\\n  height: 5rem;\\n}\\n\\n.cell-input {\\n  width: 85%;\\n}\\n.cell-input kkl-column-form {\\n  width: inherit;\\n}\\n\\n::ng-deep .mat-sort-header-arrow {\\n  color: #d6a348 !important;\\n}\";","export default \"<div>\\r\\n  <mat-table\\r\\n    (matSortChange)=\\\"onSort($event)\\\"\\r\\n    mat-table\\r\\n    matSort\\r\\n    [dataSource]=\\\"$data | async | paginate: pagination\\\"\\r\\n    [dir]=\\\"'rtl'\\\"\\r\\n  >\\r\\n    <ng-container\\r\\n      *ngFor=\\\"let column of tableColumns\\\"\\r\\n      [matColumnDef]=\\\"column.columnDef\\\"\\r\\n    >\\r\\n      <!-- COLUMN HEADER SECTION-->\\r\\n\\r\\n      <ng-container *ngIf=\\\"!column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        >\\r\\n          <!-- DEFAULT HEADER -->\\r\\n          <kkl-typography [bold]=\\\"600\\\" *ngIf=\\\"!column.filterable\\\">\\r\\n            {{ column.label }}\\r\\n          </kkl-typography>\\r\\n\\r\\n          <ng-container\\r\\n            *ngIf=\\\"column.columnDef === 'actions' && column.slotRef\\\"\\r\\n          >\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\\"\\r\\n                headerSlots[column.columnDef];\\r\\n                context: { $implicit: column }\\r\\n              \\\"\\r\\n            >\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- FILTER HEADER -->\\r\\n          <kkl-column-filter\\r\\n            *ngIf=\\\"column.filterable\\\"\\r\\n            [column]=\\\"column\\\"\\r\\n          ></kkl-column-filter>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- SORT HEADER -->\\r\\n      <ng-container *ngIf=\\\"column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          mat-sort-header\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n          [start]=\\\"column.sortDir\\\"\\r\\n        >\\r\\n          <kkl-typography [bold]=\\\"600\\\" [size]=\\\"1.2\\\">\\r\\n            {{ column.label }}\\r\\n          </kkl-typography>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- COLUMN CELL SECTION-->\\r\\n\\r\\n      <mat-cell\\r\\n        *matCellDef=\\\"let cell; let i = index\\\"\\r\\n        [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        [attr.colspan]=\\\"i\\\"\\r\\n      >\\r\\n        <!-- DEFAULT SECTION-->\\r\\n        <ng-container *ngIf=\\\"!cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchCase=\\\"'custom'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots[column.columnDef];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <kkl-typography>\\r\\n                {{ cell.item[column.columnDef] | format: type }}\\r\\n              </kkl-typography>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- FORM SECTION-->\\r\\n        <ng-container *ngIf=\\\"cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <div class=\\\"cell-input\\\">\\r\\n                <kkl-column-form\\r\\n                  *ngIf=\\\"column?.question\\\"\\r\\n                  [control]=\\\"cell.formGroup.controls[column.columnDef]\\\"\\r\\n                  [question]=\\\"column?.question\\\"\\r\\n                ></kkl-column-form>\\r\\n              </div>\\r\\n            </ng-container>\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <mat-header-row\\r\\n      [ngClass]=\\\"[theme]\\\"\\r\\n      *matHeaderRowDef=\\\"columnDefs\\\"\\r\\n    ></mat-header-row>\\r\\n\\r\\n    <mat-row\\r\\n      *matRowDef=\\\"let row; columns: columnDefs\\\"\\r\\n      (click)=\\\"onRowClicked(row)\\\"\\r\\n    ></mat-row>\\r\\n  </mat-table>\\r\\n\\r\\n  <kkl-pagination [pagination]=\\\"pagination\\\"></kkl-pagination>\\r\\n</div>\\r\\n\";","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { SelectOption } from '../../form/models/question-select.model';\r\nimport { ColumnModel } from '../column.model';\r\n\r\n@Component({\r\n  selector: 'kkl-column-filter',\r\n  template: (require('./column-filter.component.html').default || require('./column-filter.component.html')).length ? (require('./column-filter.component.html').default || require('./column-filter.component.html')) : '',\r\n})\r\nexport class ColumnFilterComponent implements OnInit {\r\n  @Input() column: ColumnModel;\r\n  public label: string;\r\n  public options: SelectOption[];\r\n\r\n  @Output() optionSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.label = this.column.label;\r\n    this.options = this.column.filterOptions;\r\n  }\r\n\r\n  public onOptionSelect(value) {\r\n    this.optionSelect.emit(value);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { QuestionSelectModel, SelectOption } from '../../form/models/question-select.model';\r\nimport { QuestionBase } from '../../form/services/form.service';\r\nimport { MessageService } from '../../form/services/message.service';\r\n\r\n@Component({\r\n  selector: 'kkl-column-form',\r\n  template: (require('./column-form.component.html').default || require('./column-form.component.html')).length ? (require('./column-form.component.html').default || require('./column-form.component.html')) : '',\r\n  styles: [(require('./column-form.component.scss').default || require('./column-form.component.scss')).length ? (require('./column-form.component.scss').default || require('./column-form.component.scss')) : '']\r\n})\r\nexport class ColumnFormComponent implements OnInit {\r\n\r\n  @Input() public question: QuestionBase;\r\n  @Input() public control: FormControl;\r\n\r\n  public type: string;\r\n  public label: string;\r\n  public icon: string;\r\n  public options: SelectOption[]\r\n  public error: string = ''\r\n\r\n  public color: string;\r\n  public iconType: string = 'svg';\r\n  public iconRotate: number = 0;\r\n\r\n  @Output() public selected: EventEmitter<QuestionSelectModel> = new EventEmitter();\r\n  @Output() public register: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private messageService: MessageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.type = this.question?.type\r\n    this.label = this.question?.label || ''\r\n    this.icon = this.question?.icon || ''\r\n\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.options = this.question.options;\r\n    }\r\n\r\n    this.subscribeToControl()\r\n  }\r\n\r\n  // subscription section\r\n  private subscribeToControl() {\r\n\r\n    if (this.control.disabled) {\r\n      this.color = 'disable';\r\n    }\r\n\r\n\r\n    this.control.valueChanges.subscribe((value) => {\r\n      if (this.control.disabled) {\r\n        this.color = 'disable';\r\n      } else if (this.control.errors) {\r\n        this.color = 'danger';\r\n      } else {\r\n        this.color = '';\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  public validate() {\r\n    this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n\r\n    if (this.error) {\r\n      this.color = 'danger';\r\n    }\r\n\r\n    this.control.valueChanges.subscribe(() => {\r\n      this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n    });\r\n  }\r\n\r\n  public onSelectChange() {\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.selected.emit(this.question)\r\n      this.question.onSelectChange()\r\n    }\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"names":[],"sourceRoot":""}