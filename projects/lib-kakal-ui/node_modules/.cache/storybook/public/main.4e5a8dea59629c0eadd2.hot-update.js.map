{"version":3,"file":"main.4e5a8dea59629c0eadd2.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AAQA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AA3EA;AAHA;AACA;AACA;;AACA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/components/menu/menu.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MenuModel } from './menu.model';\r\nimport { MenuItemModel } from '../menu-item/menu-item.model';\r\nimport { ListItemKeys } from '../list-item/list-item.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n\r\n  private modulePrefix: string;\r\n\r\n  constructor() { }\r\n\r\n  public getPrefix(): string {\r\n    return this.modulePrefix;\r\n  }\r\n\r\n  public setPrefix(modulePrefix: string) {\r\n    this.modulePrefix = modulePrefix;\r\n  }\r\n\r\n  // METHODS TO HANDLE ACTIVE STEP STATUS\r\n  private activeStep(items: MenuItemModel[], key: ListItemKeys, value: any) {\r\n    items.find((item) => {\r\n      if (item[key] === value) {\r\n        item.active();\r\n      }\r\n    });\r\n  }\r\n\r\n  private unactiveStep(items: MenuItemModel[]) {\r\n    items.find((item) => {\r\n      if (item.isActive) {\r\n        item.unactive();\r\n      }\r\n    });\r\n  }\r\n\r\n  public setSteps(\r\n    items: MenuItemModel[],\r\n    key: ListItemKeys,\r\n    value: string\r\n  ): MenuItemModel[] {\r\n    this.unactiveStep(items);\r\n    this.activeStep(items, key, value);\r\n    return [...items];\r\n  }\r\n\r\n  public setList(\r\n    menu: MenuModel[],\r\n    key: ListItemKeys,\r\n    value: string\r\n  ): MenuModel[] {\r\n    const updateMenu = [...menu];\r\n    updateMenu.find((list) => {\r\n      console.log(this.modulePrefix)\r\n      if (list.prefix === this.modulePrefix) {\r\n        list.links = this.setSteps(list.links, key, value);\r\n      }\r\n    });\r\n    return updateMenu;\r\n  }\r\n  public setMenu(\r\n    menu: MenuModel[],\r\n    modulePrefix: string,\r\n    key: ListItemKeys,\r\n    value: string,\r\n  ): MenuModel[] {\r\n    const updateMenu = [...menu];\r\n    updateMenu.find((list) => {\r\n      if (list.prefix === modulePrefix) {\r\n        list.links = this.setSteps(list.links, key, value);\r\n      }\r\n    });\r\n    return updateMenu;\r\n  }\r\n\r\n  public findList(menu : MenuModel, key: string, value: string): MenuModel {\r\n    return {\r\n      ...this.getMenu().find((list: MenuModel) => list[key] === value),\r\n    };\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}