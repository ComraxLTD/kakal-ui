"use strict";
globalThis["webpackHotUpdatelib_kakal_ui"]("main",{

/***/ "./src/lib/app/components/menu/menu.service.ts":
/*!*****************************************************!*\
  !*** ./src/lib/app/components/menu/menu.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuService": () => (/* binding */ MenuService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm2015/core.js");


let MenuService = class MenuService {
    constructor() { }
    getPrefix() {
        return this.modulePrefix;
    }
    setPrefix(modulePrefix) {
        this.modulePrefix = modulePrefix;
    }
    // METHODS TO HANDLE ACTIVE STEP STATUS
    activeStep(items, key, value) {
        items.find((item) => {
            if (item[key] === value) {
                item.active();
            }
        });
    }
    unactiveStep(items) {
        items.find((item) => {
            if (item.isActive) {
                item.unactive();
            }
        });
    }
    setSteps(items, key, value) {
        this.unactiveStep(items);
        this.activeStep(items, key, value);
        return [...items];
    }
    setList(menu, key, value) {
        const updateMenu = [...menu];
        updateMenu.find((list) => {
            console.log(this.modulePrefix);
            if (list.prefix === this.modulePrefix) {
                list.links = this.setSteps(list.links, key, value);
            }
        });
        return updateMenu;
    }
    setMenu(menu, modulePrefix, key, value) {
        const updateMenu = [...menu];
        updateMenu.find((list) => {
            if (list.prefix === modulePrefix) {
                list.links = this.setSteps(list.links, key, value);
            }
        });
        return updateMenu;
    }
    findList(menu, key, value) {
        return Object.assign({}, menu.find((list) => list[key] === value));
    }
};
MenuService = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({
        providedIn: 'root',
    }),
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:paramtypes", [])
], MenuService);



/***/ })

});
//# sourceMappingURL=main.a77b516c67236282f1d0.hot-update.js.map