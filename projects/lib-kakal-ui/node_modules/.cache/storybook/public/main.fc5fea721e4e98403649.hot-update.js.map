{"version":3,"file":"main.fc5fea721e4e98403649.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9MA;AAEA;AAMA;AAOA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAJA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AAOA;AAkBA;AACA;AAVA;AAGA;AACA;AAEA;AACA;AAKA;AAEA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AA5EA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAhBA;AALA;AACA;AACA;AACA;AACA;AAoBA;AAnBA;AAAA;;;;;;;;;;;;;;ACIA;AAgBA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5DA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAvDA;AAHA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAOA;AAeA;AARA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAPA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAOA;AAeA;AAJA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AAXA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;ACPA;AAKA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACtBA;AAQA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AAEA;AAQA;AAOA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpFA;AAWA;AAEA;AACA;AA0BA;AA0BA;AAAA;AAJA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3FA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAxBA;AANA;AACA;AACA;AACA;AACA;AACA;AA2BA;AA1BA;AAAA;;;;;;;;;;;;;;;;;;;;;ACxCA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAxGA;AAHA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAEA;AAOA;AAQA;AAEA;AACA;AAVA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;ACtBA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAPA;AAHA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3BA;AAHA;AACA;AACA;AAIA;AADA;AAFA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/components/columns/column-form/column-form.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/pagination/pagination.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/status/status.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.scss","webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.scss","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-filter/column-filter.component.html","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-form/column-form.component.html","webpack://lib-kakal-ui/./src/lib/app/components/pagination/pagination.component.html","webpack://lib-kakal-ui/./src/lib/app/components/status/status.component.html","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.html","webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.html","webpack://lib-kakal-ui/./src/lib/stories/Table.stories.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-filter/column-filter.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/column-form/column-form.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/column.model.ts","webpack://lib-kakal-ui/./src/lib/app/components/columns/columns.service.ts","webpack://lib-kakal-ui/./src/lib/app/components/pagination/pagination.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/status/status.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/status/status.model.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/models/row.model.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/table-datasource.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/table.component.ts","webpack://lib-kakal-ui/./src/lib/app/components/table/table.service.ts","webpack://lib-kakal-ui/./src/lib/app/examples/table-ex/table-ex.component.ts","webpack://lib-kakal-ui/./src/lib/app/utilities/models/assets.model.ts","webpack://lib-kakal-ui/./src/lib/app/utilities/pipes/area.pipe.ts","webpack://lib-kakal-ui/./src/lib/app/utilities/pipes/format.pipe.ts"],"sourcesContent":["export default \"* {\\n  font-family: \\\"open sans hebrew\\\" !important;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n}\\n\\nhtml,\\nbody,\\napp-root,\\n#root {\\n  height: 100%;\\n  box-sizing: border-box;\\n  font-size: 10px;\\n}\\n\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \\\"open sans hebrew\\\", \\\"Helvetica Neue\\\", sans-serif;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n  box-sizing: border-box;\\n}\\n\\n::ng-deep mat-grid-list,\\nmat-grid-tile {\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.material-icons {\\n  font-family: \\\"Material Icons\\\" !important;\\n}\\n\\n@media screen and (max-width: 1280px) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (landscape) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (portrait) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\\n  html {\\n    font-size: 10px;\\n  }\\n}\\n.column-input {\\n  width: inherit;\\n}\\n.column-input input {\\n  width: inherit;\\n  border-radius: 5px;\\n  border: 1px solid #000000;\\n}\\n.column-input input.error {\\n  border: 2px solid #d83020;\\n}\";","export default \"* {\\n  font-family: \\\"open sans hebrew\\\" !important;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n}\\n\\nhtml,\\nbody,\\napp-root,\\n#root {\\n  height: 100%;\\n  box-sizing: border-box;\\n  font-size: 10px;\\n}\\n\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \\\"open sans hebrew\\\", \\\"Helvetica Neue\\\", sans-serif;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n  box-sizing: border-box;\\n}\\n\\n::ng-deep mat-grid-list,\\nmat-grid-tile {\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.material-icons {\\n  font-family: \\\"Material Icons\\\" !important;\\n}\\n\\n@media screen and (max-width: 1280px) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (landscape) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (portrait) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\\n  html {\\n    font-size: 10px;\\n  }\\n}\\n.pagination {\\n  height: 5vh;\\n}\\n.pagination ::ng-deep .ngx-pagination .current,\\n.pagination .btn-info {\\n  background-color: transparent !important;\\n  border: 2px solid #d6a348 !important;\\n  font-weight: 550;\\n  color: #d6a348 !important;\\n  border-radius: 5px !important;\\n}\\n.pagination ::ng-deep li.pagination-next > a,\\n.pagination ::ng-deep li.pagination-previous > a {\\n  color: #d6a348 !important;\\n}\\n.pagination ::ng-deep .pagination-next {\\n  padding-left: 40px !important;\\n}\\n.pagination ::ng-deep .pagination-previous {\\n  padding-right: 40px !important;\\n}\\n.pagination ::ng-deep .pagination-next a::after,\\n.pagination ::ng-deep .pagination-next.disabled::after {\\n  display: none !important;\\n}\\n.pagination ::ng-deep li.pagination-previous a::before,\\n.pagination ::ng-deep li.pagination-previous.disabled::before {\\n  display: none !important;\\n}\";","export default \"* {\\n  font-family: \\\"open sans hebrew\\\" !important;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n}\\n\\nhtml,\\nbody,\\napp-root,\\n#root {\\n  height: 100%;\\n  box-sizing: border-box;\\n  font-size: 10px;\\n}\\n\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \\\"open sans hebrew\\\", \\\"Helvetica Neue\\\", sans-serif;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n  box-sizing: border-box;\\n}\\n\\n::ng-deep mat-grid-list,\\nmat-grid-tile {\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.material-icons {\\n  font-family: \\\"Material Icons\\\" !important;\\n}\\n\\n@media screen and (max-width: 1280px) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (landscape) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (portrait) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\\n  html {\\n    font-size: 10px;\\n  }\\n}\\n.status-container,\\ndiv {\\n  width: 100%;\\n}\\n\\nmat-progress-bar.status-progress-bar :ng-deep .mat-progress-bar-buffer {\\n  background-color: #90a4ae !important;\\n}\\nmat-progress-bar.status-progress-bar :ng-deep .mat-progress-bar.mat-accent.mat-progress-bar-buffer {\\n  background-color: #90a4ae !important;\\n}\\nmat-progress-bar.status-progress-bar ::ng-deep .mat-progress-bar-buffer.mat-progress-bar-element {\\n  background-color: !important;\\n}\\n\\n.step-label {\\n  padding-top: 8px;\\n}\\n\\ndiv.status-bar {\\n  height: 4px;\\n  width: 100%;\\n  background-color: rgba(0, 0, 0, 0.26);\\n}\\ndiv.status-bar.active {\\n  background-color: #ff6f2e;\\n}\";","export default \"* {\\n  font-family: \\\"open sans hebrew\\\" !important;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n}\\n\\nhtml,\\nbody,\\napp-root,\\n#root {\\n  height: 100%;\\n  box-sizing: border-box;\\n  font-size: 10px;\\n}\\n\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \\\"open sans hebrew\\\", \\\"Helvetica Neue\\\", sans-serif;\\n  src: url(\\\"../assets/fonts/opanSansHebrew/OpenSansHebrew-Regular.ttf\\\") format(\\\"opentype\\\") !important;\\n  box-sizing: border-box;\\n}\\n\\n::ng-deep mat-grid-list,\\nmat-grid-tile {\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.material-icons {\\n  font-family: \\\"Material Icons\\\" !important;\\n}\\n\\n@media screen and (max-width: 1280px) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (landscape) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\\n  html {\\n    font-size: 8px;\\n  }\\n}\\n/* iPads (portrait) ----------- */\\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\\n  html {\\n    font-size: 10px;\\n  }\\n}\\nmat-table {\\n  width: 100%;\\n  height: 100%;\\n  background-color: transparent !important;\\n}\\n\\nmat-cell {\\n  height: inherit;\\n}\\nmat-cell.center {\\n  justify-content: center;\\n}\\n\\nmat-header-cell.center {\\n  justify-content: center;\\n}\\n\\nmat-header-row.accent {\\n  border-bottom: #ff6f2e solid 3px;\\n}\\n\\nmat-header-row.primary {\\n  border-bottom: #d6a348 solid 3px;\\n}\\n\\nmat-row {\\n  height: 5rem;\\n}\\n\\n.cell-input {\\n  width: 85%;\\n}\\n.cell-input app-column-form {\\n  width: inherit;\\n}\\n\\n::ng-deep .mat-sort-header-arrow {\\n  color: #d6a348 !important;\\n}\";","export default \".table {\\n  width: 95%;\\n}\";","export default \"<ng-container>\\r\\n  <app-typography [bold]=\\\"600\\\" [size]=\\\"1.2\\\">\\r\\n    {{ label }}\\r\\n  </app-typography>\\r\\n  <button mat-icon-button color=\\\"primary\\\" [matMenuTriggerFor]=\\\"menu\\\">\\r\\n    <mat-icon> arrow_drop_down </mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #menu=\\\"matMenu\\\" xPosition=\\\"before\\\">\\r\\n    <button\\r\\n      mat-menu-item\\r\\n      *ngFor=\\\"let option of options\\\"\\r\\n      (click)=\\\"onCOptionSelect(option.value)\\\"\\r\\n    >\\r\\n      <app-typography> {{ option.label }}</app-typography>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</ng-container>\\r\\n\";","export default \"<div class=\\\"column-input\\\">\\r\\n  <input\\r\\n    [ngClass]=\\\"{ error: error }\\\"\\r\\n    matInput\\r\\n    autocomplete=\\\"off\\\"\\r\\n    required\\r\\n    [formControl]=\\\"control\\\"\\r\\n    [name]=\\\"question.key\\\"\\r\\n    (focusout)=\\\"validate()\\\"\\r\\n    #input\\r\\n  />\\r\\n</div>\\r\\n\";","export default \"<div class=\\\"pagination\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" dir=\\\"ltr\\\">\\r\\n  <pagination-controls\\r\\n    *ngIf=\\\"pagination.totalItems > pagination.itemsPerPage\\\"\\r\\n    [previousLabel]=\\\"labels.previousLabel\\\"\\r\\n    [nextLabel]=\\\"labels.nextLabel\\\"\\r\\n    (pageChange)=\\\"onPageChange($event)\\\"\\r\\n    [maxSize]=\\\"maxSize || 5\\\"\\r\\n  ></pagination-controls>\\r\\n</div>\\r\\n\";","export default \"<div class=\\\"status-container\\\" fxFill fxFlex=\\\"row\\\">\\r\\n  <mat-grid-list\\r\\n    [cols]=\\\"cols || 8\\\"\\r\\n    [rowHeight]=\\\"(height || 2) + 'vh'\\\"\\r\\n    [gutterSize]=\\\"gutter || '2' + 'px'\\\"\\r\\n    [dir]=\\\"'rtl'\\\"\\r\\n  >\\r\\n    <mat-grid-tile [colspan]=\\\"cols || 8\\\">\\r\\n      <app-typography *ngIf=\\\"!slots\\\">\\r\\n        {{ status.label }}\\r\\n      </app-typography>\\r\\n\\r\\n      <ng-container\\r\\n        *ngTemplateOutlet=\\\"slots?.textRef; context :{status}\\\"\\r\\n      ></ng-container>\\r\\n    </mat-grid-tile>\\r\\n    <mat-grid-tile *ngFor=\\\"let step of steps; let i = index\\\">\\r\\n      <div fxLayout=\\\"column\\\">\\r\\n        <div [ngClass]=\\\"{ 'status-bar': true, active: !!step }\\\"></div>\\r\\n        <div\\r\\n          class=\\\"step-label\\\"\\r\\n          *ngIf=\\\"hasLabel\\\"\\r\\n          fxLayout=\\\"column\\\"\\r\\n          fxLayoutAlign=\\\"end center\\\"\\r\\n        >\\r\\n          <app-typography [color]=\\\"step ? 'accent' : 'disable'\\\" size=\\\"12\\\">\\r\\n            0{{ i + 1 }}\\r\\n          </app-typography>\\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-grid-tile>\\r\\n  </mat-grid-list>\\r\\n</div>\\r\\n\";","export default \"<div>\\r\\n  <mat-table\\r\\n    (matSortChange)=\\\"onSort($event)\\\"\\r\\n    mat-table\\r\\n    matSort\\r\\n    [dataSource]=\\\"$data | async | paginate: pagination\\\"\\r\\n    [dir]=\\\"'rtl'\\\"\\r\\n  >\\r\\n    <ng-container\\r\\n      *ngFor=\\\"let column of tableColumns\\\"\\r\\n      [matColumnDef]=\\\"column.columnDef\\\"\\r\\n    >\\r\\n      <!-- COLUMN HEADER SECTION-->\\r\\n\\r\\n      <ng-container *ngIf=\\\"!column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        >\\r\\n          <!-- DEFAULT HEADER -->\\r\\n          <app-typography [bold]=\\\"600\\\" *ngIf=\\\"!column.filterable\\\">\\r\\n            {{ column.label }}\\r\\n          </app-typography>\\r\\n\\r\\n          <ng-container\\r\\n            *ngIf=\\\"column.columnDef === 'actions' && column.slotRef\\\"\\r\\n          >\\r\\n            <ng-container\\r\\n              *ngTemplateOutlet=\\\"\\r\\n                headerSlots[column.columnDef];\\r\\n                context: { $implicit: column }\\r\\n              \\\"\\r\\n            >\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- FILTER HEADER -->\\r\\n          <app-column-filter\\r\\n            *ngIf=\\\"column.filterable\\\"\\r\\n            [column]=\\\"column\\\"\\r\\n          ></app-column-filter>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- SORT HEADER -->\\r\\n      <ng-container *ngIf=\\\"column.sortable\\\">\\r\\n        <mat-header-cell\\r\\n          mat-sort-header\\r\\n          *matHeaderCellDef\\r\\n          [ngClass]=\\\"{ center: column.center }\\\"\\r\\n          [start]=\\\"column.sortDir\\\"\\r\\n        >\\r\\n          <app-typography [bold]=\\\"600\\\" [size]=\\\"1.2\\\">\\r\\n            {{ column.label }}\\r\\n          </app-typography>\\r\\n        </mat-header-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- COLUMN CELL SECTION-->\\r\\n\\r\\n      <mat-cell\\r\\n        *matCellDef=\\\"let cell; let i = index\\\"\\r\\n        [ngClass]=\\\"{ center: column.center }\\\"\\r\\n        [attr.colspan]=\\\"i\\\"\\r\\n      >\\r\\n        <!-- DEFAULT SECTION-->\\r\\n        <ng-container *ngIf=\\\"!cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchCase=\\\"'custom'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots[column.columnDef];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <app-typography>\\r\\n                {{ cell.item[column.columnDef] | format: type }}\\r\\n              </app-typography>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- FORM SECTION-->\\r\\n        <ng-container *ngIf=\\\"cell.editable\\\">\\r\\n          <ng-container [ngSwitch]=\\\"column.type\\\">\\r\\n            <ng-container *ngSwitchDefault>\\r\\n              <div class=\\\"cell-input\\\">\\r\\n                <app-column-form\\r\\n                  *ngIf=\\\"column?.question\\\"\\r\\n                  [control]=\\\"cell.formGroup.controls[column.columnDef]\\\"\\r\\n                  [question]=\\\"column?.question\\\"\\r\\n                ></app-column-form>\\r\\n              </div>\\r\\n            </ng-container>\\r\\n            <ng-container *ngSwitchCase=\\\"'actions'\\\">\\r\\n              <ng-container\\r\\n                *ngTemplateOutlet=\\\"\\r\\n                  rowSlots['actions'];\\r\\n                  context: { cell: this.cell, column: this.column }\\r\\n                \\\"\\r\\n              >\\r\\n              </ng-container>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n        </ng-container>\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <mat-header-row\\r\\n      [ngClass]=\\\"[theme]\\\"\\r\\n      *matHeaderRowDef=\\\"columnDefs\\\"\\r\\n    ></mat-header-row>\\r\\n\\r\\n    <mat-row\\r\\n      *matRowDef=\\\"let row; columns: columnDefs\\\"\\r\\n      (click)=\\\"onRowClicked(row)\\\"\\r\\n    ></mat-row>\\r\\n  </mat-table>\\r\\n\\r\\n  <app-pagination [pagination]=\\\"pagination\\\"></app-pagination>\\r\\n</div>\\r\\n\";","export default \"<div class=\\\"container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <div class=\\\"table\\\">\\r\\n    <app-table\\r\\n      [data]=\\\"data\\\"\\r\\n      [columns]=\\\"columns\\\"\\r\\n      [model]=\\\"model\\\"\\r\\n      [options]=\\\"options\\\"\\r\\n      [rowSlots]=\\\"{status}\\\"\\r\\n    ></app-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #status let-cell=\\\"cell\\\">\\r\\n  <div class=\\\"status\\\">\\r\\n    <app-status [status]=\\\"cell.item?.status\\\"></app-status>\\r\\n  </div>\\r\\n</ng-template>\\r\\n`;\\r\\n\";","import { moduleMetadata, Story, Meta } from '@storybook/angular';\r\nimport { CommonModule, DatePipe, DecimalPipe } from '@angular/common';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { NgxPaginationModule, PaginationInstance } from 'ngx-pagination';\r\nimport { ColumnFilterComponent } from '../app/components/columns/column-filter/column-filter.component';\r\nimport { ColumnFormComponent } from '../app/components/columns/column-form/column-form.component';\r\nimport { ColumnsService } from '../app/components/columns/columns.service';\r\nimport { FormService } from '../app/components/form/services/form.service';\r\nimport { PaginationComponent } from '../app/components/pagination/pagination.component';\r\nimport { StatusComponent } from '../app/components/status/status.component';\r\nimport { TableComponent } from '../app/components/table/table.component';\r\nimport { TableService } from '../app/components/table/table.service';\r\nimport { TypographyComponent } from '../app/components/typography/typography.component';\r\nimport { TableExComponent } from '../app/examples/table-ex/table-ex.component';\r\nimport { ClassesDirective } from '../app/utilities/directives/classes.directive';\r\nimport { AssetsModel } from '../app/utilities/models/assets.model';\r\nimport { AreaPipe } from '../app/utilities/pipes/area.pipe';\r\nimport { FormatPipe } from '../app/utilities/pipes/format.pipe';\r\nimport { MaterialModule } from '../material/material.module';\r\nimport { ColumnModel } from '../app/components/columns/column.model';\r\n\r\nexport default {\r\n  title: 'Table',\r\n  component: TableExComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [\r\n        TableComponent,\r\n        StatusComponent,\r\n        ColumnFilterComponent,\r\n        ColumnFormComponent,\r\n        PaginationComponent,\r\n        TypographyComponent,\r\n        ClassesDirective,\r\n        FormatPipe,\r\n        AreaPipe,\r\n      ],\r\n      providers: [\r\n        FormService,\r\n        TableService,\r\n        ColumnsService,\r\n        FormatPipe,\r\n        AreaPipe,\r\n        DatePipe,\r\n        DecimalPipe,\r\n      ],\r\n      imports: [\r\n        ReactiveFormsModule,\r\n        BrowserAnimationsModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        NgxPaginationModule,\r\n        MaterialModule,\r\n      ],\r\n    }),\r\n  ],\r\n} as Meta;\r\n\r\nconst Template: Story<TableExComponent<any>> = (\r\n  args: TableExComponent<any>\r\n) => ({\r\n  props: args,\r\n});\r\n\r\nconst pagination: PaginationInstance = {\r\n  itemsPerPage: 6,\r\n  currentPage: 1,\r\n  totalItems: 12,\r\n};\r\n\r\nconst { data, columns, options } = {\r\n  data: [\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 10,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: 748,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לטיפול עורך דין',\r\n        value: 4,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'שוריין ע\"י פיננסים',\r\n        value: 5,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 24,\r\n      block: 24,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לרו\"ח',\r\n        value: 3,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 54,\r\n      subdivision: 0,\r\n      area: 1037,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'התקבלה עסקה חדשה',\r\n        value: 1,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 680,\r\n      areaOwn: null,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לפיננסים',\r\n        value: 1,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n    {\r\n      id: 20,\r\n      block: 20,\r\n      division: 20,\r\n      subdivision: 0,\r\n      area: 2692,\r\n      areaOwn: 748,\r\n      property: '',\r\n      status: {\r\n        label: 'ממתין לטיפול עורך דין',\r\n        value: 4,\r\n      },\r\n      description: '',\r\n      location: 'קריית שמונה',\r\n    },\r\n  ],\r\n  columns: [\r\n    new ColumnModel({ label: 'גוש', type: 'number' }),\r\n    new ColumnModel({ label: 'חלקה', type: 'number' }),\r\n    new ColumnModel({ label: 'תת חלקה', type: 'number' }),\r\n    new ColumnModel({ label: 'שטח מ\"ר', type: 'number' }),\r\n    new ColumnModel({ label: 'שטח בבעלות הימנותא', type: 'number' }),\r\n    new ColumnModel({ label: 'זכות במס', type: 'text' }),\r\n    new ColumnModel({ label: 'סטטוס', type: 'custom', center: true }),\r\n    new ColumnModel({ label: 'תיאור', type: 'text' }),\r\n    new ColumnModel({ label: 'יישוב', type: 'text' }),\r\n  ],\r\n  options: {\r\n    pagination: pagination,\r\n    filters: ['id', '_constructor-name_'],\r\n  },\r\n};\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n  data: data,\r\n  columns: columns,\r\n  model: new AssetsModel(),\r\n  options: options,\r\n};\r\n\r\nconst filterColumns = [...columns].map((column) => {\r\n  column.filterable = true;\r\n  column.filterOptions = [{ label: 'ex', value: 'ex' }];\r\n  return column;\r\n});\r\n\r\nexport const Filter = Template.bind({});\r\nFilter.args = {\r\n  data: data,\r\n  columns: (columns) => [...columns].map((column) => {\r\n    column.filterable = true;\r\n    column.filterOptions = [{ label: 'ex', value: 'ex' }];\r\n    return column;\r\n  });,\r\n  model: new AssetsModel(),\r\n  options: options,\r\n};\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { SelectOption } from '../../form/models/question-select.model';\r\nimport { ColumnModel } from '../column.model';\r\n\r\n@Component({\r\n  selector: 'app-column-filter',\r\n  template: (require('./column-filter.component.html').default || require('./column-filter.component.html')).length ? (require('./column-filter.component.html').default || require('./column-filter.component.html')) : '',\r\n})\r\nexport class ColumnFilterComponent implements OnInit {\r\n  @Input() column: ColumnModel;\r\n  public label: string;\r\n  public options: SelectOption[];\r\n\r\n  @Output() optionSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.label = this.column.label;\r\n    this.options = this.column.filterOptions;\r\n  }\r\n\r\n  public onOptionSelect(value) {\r\n    this.optionSelect.emit(value);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { QuestionSelectModel, SelectOption } from '../../form/models/question-select.model';\r\nimport { QuestionBase } from '../../form/services/form.service';\r\nimport { MessageService } from '../../form/services/message.service';\r\n\r\n@Component({\r\n  selector: 'app-column-form',\r\n  template: (require('./column-form.component.html').default || require('./column-form.component.html')).length ? (require('./column-form.component.html').default || require('./column-form.component.html')) : '',\r\n  styles: [(require('./column-form.component.scss').default || require('./column-form.component.scss')).length ? (require('./column-form.component.scss').default || require('./column-form.component.scss')) : '']\r\n})\r\nexport class ColumnFormComponent implements OnInit {\r\n\r\n  @Input() public question: QuestionBase;\r\n  @Input() public control: FormControl;\r\n\r\n  public type: string;\r\n  public label: string;\r\n  public icon: string;\r\n  public options: SelectOption[]\r\n  public error: string = ''\r\n\r\n  public color: string;\r\n  public iconType: string = 'svg';\r\n  public iconRotate: number = 0;\r\n\r\n  @Output() public selected: EventEmitter<QuestionSelectModel> = new EventEmitter();\r\n  @Output() public register: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private messageService: MessageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.type = this.question?.type\r\n    this.label = this.question?.label || ''\r\n    this.icon = this.question?.icon || ''\r\n\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.options = this.question.options;\r\n    }\r\n\r\n    this.subscribeToControl()\r\n  }\r\n\r\n  // subscription section\r\n  private subscribeToControl() {\r\n\r\n    if (this.control.disabled) {\r\n      this.color = 'disable';\r\n    }\r\n\r\n\r\n    this.control.valueChanges.subscribe((value) => {\r\n      if (this.control.disabled) {\r\n        this.color = 'disable';\r\n      } else if (this.control.errors) {\r\n        this.color = 'danger';\r\n      } else {\r\n        this.color = '';\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  public validate() {\r\n    this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n\r\n    if (this.error) {\r\n      this.color = 'danger';\r\n    }\r\n\r\n    this.control.valueChanges.subscribe(() => {\r\n      this.error = this.messageService.getErrorMessage(this.control, this.label);\r\n    });\r\n  }\r\n\r\n  public onSelectChange() {\r\n    if (this.question instanceof QuestionSelectModel) {\r\n      this.selected.emit(this.question)\r\n      this.question.onSelectChange()\r\n    }\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { ElementRef } from '@angular/core';\r\nimport { SelectOption } from '../form/models/question-select.model';\r\nimport { ControlType } from '../form/models/question.model';\r\nimport { Question } from '../form/services/form.service';\r\n\r\nexport declare type SortDir = 'desc' | 'asc';\r\n\r\nexport declare type ColumnType =\r\n  | 'number'\r\n  | 'date'\r\n  | 'text'\r\n  | 'custom'\r\n  | 'actions'\r\n  | 'expend';\r\n\r\nexport class ColumnModel {\r\n  public columnDef?: any;\r\n  public label?: string;\r\n  public cell?: (element) => string;\r\n  public type?: ColumnType;\r\n  public control?: ControlType;\r\n  public question?: Question;\r\n  public slotRef?: ElementRef;\r\n  public center?: boolean;\r\n  public selectable?: boolean;\r\n  public sortable?: boolean;\r\n  public sortDir?: SortDir;\r\n  public filterable?: boolean;\r\n  public filterOptions?: SelectOption[];\r\n\r\n\r\n  constructor(options?: {\r\n    columnDef?: string;\r\n    label?: string;\r\n    cell?: (element) => string;\r\n    type?: ColumnType;\r\n    control?: ControlType;\r\n    question?: Question;\r\n    slotRef?: ElementRef;\r\n    selectable?: boolean;\r\n    center?: boolean;\r\n    sortable?: boolean;\r\n    sortDir?: SortDir;\r\n    filterable?: boolean;\r\n    filterOptions?: SelectOption[];\r\n  }) {\r\n    this.columnDef = options?.columnDef || '';\r\n    this.label = options?.label || '';\r\n    this.type = options?.type || 'text';\r\n    this.cell = (element) => `${element[this.columnDef]}`;\r\n    this.control = options?.control;\r\n    this.question = options?.question;\r\n    this.slotRef = options?.slotRef || null;\r\n    this.center = options?.center || false;\r\n    this.selectable = options?.selectable || false;\r\n    this.sortable = options?.sortable || false;\r\n    this.sortDir = options?.sortDir || 'asc';\r\n    this.filterable = options?.filterable || false;\r\n    this.filterOptions = options?.filterOptions || [];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ColumnModel } from './column.model';\r\n\r\nexport interface ColumnsData<T> {\r\n  columns: ColumnModel[];\r\n  columnsDefs: (string| keyof T)[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColumnsService<T> {\r\n  constructor() {}\r\n\r\n  private setColumnDefsFromType(model: T): string[] {\r\n    return Object.keys(model);\r\n  }\r\n\r\n  private filterColumnDefs(columnDefs: (string| keyof T)[], filters: [keyof T | string]): (string| keyof T)[] {\r\n    return columnDefs.filter((item) => !filters.includes(item));\r\n  }\r\n\r\n  private setColumnDefs(model: T, filters: [keyof T | string]): (string| keyof T)[] {\r\n    return this.filterColumnDefs(this.setColumnDefsFromType(model), filters);\r\n  }\r\n\r\n  private setColumnWithColumnDefs(\r\n    columns: ColumnModel[],\r\n    columnDefs:  (string| keyof T)[]\r\n  ): ColumnModel[] {\r\n    return columns.map((column, i) => {\r\n      return new ColumnModel({\r\n        ...column,\r\n        columnDef: column.columnDef || columnDefs[i],\r\n      });\r\n    });\r\n  }\r\n\r\n  private setColumnDefsFromColumns(\r\n    columns: ColumnModel[],\r\n    columnDefs: (string| keyof T)[]\r\n  ):  (string| keyof T)[] {\r\n    if (columns.length > columnDefs.length) {\r\n      columnDefs = columns.map((column) => column.columnDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private initColumnsDefs(model, filters):  (string| keyof T)[] {\r\n    return this.setColumnDefs(model, filters);\r\n  }\r\n\r\n  private getColumnsDefs(columns: ColumnModel[], columnDefs: (string| keyof T)[]) {\r\n    return this.setColumnDefsFromColumns(columns, columnDefs);\r\n  }\r\n\r\n  public getColumns(\r\n    model: T,\r\n    filters: (string| keyof T)[],\r\n    tableColumns: ColumnModel[]\r\n  ): ColumnsData<T> {\r\n    const columnsDefs = this.initColumnsDefs(model, filters);\r\n    const columns = this.setColumnWithColumnDefs(tableColumns, columnsDefs);\r\n\r\n    return { columns, columnsDefs: this.getColumnsDefs(columns, columnsDefs) };\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  template: (require('./pagination.component.html').default || require('./pagination.component.html')).length ? (require('./pagination.component.html').default || require('./pagination.component.html')) : '',\r\n  styles: [(require('./pagination.component.scss').default || require('./pagination.component.scss')).length ? (require('./pagination.component.scss').default || require('./pagination.component.scss')) : '']\r\n})\r\nexport class PaginationComponent implements OnInit {\r\n\r\n  @Input() public pagination: PaginationInstance ;\r\n\r\n  @Input() paginationCount: number;\r\n  @Input() maxSize: number;\r\n\r\n  @Output() newPage: EventEmitter<number> = new EventEmitter();\r\n\r\n\r\n  public labels: any = {\r\n    previousLabel: 'הקודם',\r\n    nextLabel: 'הבא',\r\n};\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public onPageChange(number) {\r\n    this.pagination.currentPage = number;\r\n  }\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { StatusModel } from './status.model';\r\n\r\n@Component({\r\n  selector: 'app-status',\r\n  template: (require('./status.component.html').default || require('./status.component.html')).length ? (require('./status.component.html').default || require('./status.component.html')) : '',\r\n  styles: [(require('./status.component.scss').default || require('./status.component.scss')).length ? (require('./status.component.scss').default || require('./status.component.scss')) : ''],\r\n})\r\nexport class StatusComponent implements OnInit {\r\n\r\n  @Input() public cols: number\r\n  @Input() public height: number\r\n  @Input() public gutter: number\r\n  @Input() public color: string;\r\n  @Input() public hasLabel: boolean\r\n  @Input() public status: StatusModel;\r\n\r\n  @Input() slots: {textRef: ElementRef }\r\n\r\n  @Output() click  = new EventEmitter()\r\n\r\n  public steps: number[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.cols = this.cols || 8\r\n    this.color = this.color || 'accent';\r\n\r\n    for (let i = 1; i <= this.status.value; i++) {\r\n      this.steps.push(100);\r\n    }\r\n    for (let i = [...this.steps].length; i < this.cols; i++) {\r\n      this.steps.push(0);\r\n    }\r\n  }\r\n}\r\n","\r\nexport class StatusModel {\r\n\r\n  public label  : string\r\n  public value  : number\r\n\r\n  constructor(\r\n    options: {\r\n      label?: string,\r\n      value?: number,\r\n    }\r\n  ) {\r\n    this.label = options?.label;\r\n    this.value = options?.value;\r\n  }\r\n\r\n  static create(status: StatusModel) {\r\n    return new StatusModel({\r\n      label: status.label,\r\n      value: status.value,\r\n    })\r\n  }\r\n\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RowModel<T>  {\r\n\r\n  public item: T\r\n  public formGroup : FormGroup\r\n  public pending: boolean\r\n  public editable: boolean\r\n\r\n\r\n  constructor(options?: {\r\n    item?: T;\r\n    pending?: boolean;\r\n    editable?: boolean;\r\n\r\n  }) {\r\n    this.item = options?.item;\r\n    this.pending = options?.pending || false;\r\n    this.editable = options?.editable || false;\r\n  }\r\n}\r\n","import { RowModel } from './models/row.model';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { TableOptions } from './table.component';\r\n\r\nexport interface EditRow<T> {\r\n  row: RowModel<T>;\r\n  options?: any;\r\n}\r\n\r\nexport class TableDataSource<T> {\r\n  private rows: RowModel<T>[];\r\n  private rows$: BehaviorSubject<RowModel<T>[]>;\r\n  private data$: BehaviorSubject<T[]>;\r\n  private row$: Subject<RowModel<T>>;\r\n  private edit$: Subject<EditRow<T>>;\r\n\r\n  constructor(public data: T[], public options?: TableOptions<T>) {\r\n    this.data$ = new BehaviorSubject<T[]>(this.data);\r\n    this.rows$ = new BehaviorSubject<RowModel<T>[]>(\r\n      this.setDataAsRoW(this.data, this.options)\r\n    );\r\n    this.row$ = new Subject();\r\n    this.edit$ = new Subject();\r\n  }\r\n\r\n  disconnect(): void {}\r\n\r\n  private setDataAsRoW(data: T[], options?: TableOptions<T>): RowModel<T>[] {\r\n    this.rows = data\r\n      .map((item: T) => new RowModel({ item }))\r\n      .map((row: RowModel<T>) => {\r\n        if (\r\n          options?.editable &&\r\n          options?.editable.indexOf(row.item['id']) > -1\r\n        ) {\r\n          row.editable = true;\r\n        }\r\n\r\n        if (options?.pending && options?.pending.indexOf(row.item['id']) > -1) {\r\n          row.pending = true;\r\n        }\r\n\r\n        return row;\r\n      });\r\n\r\n    return this.rows;\r\n  }\r\n\r\n  public load(data?: T[]): void {\r\n    this.rows$.next(this.setDataAsRoW(data));\r\n  }\r\n\r\n  public loadRows(rows: RowModel<T>[]) {\r\n    this.rows = rows;\r\n    this.rows$.next(rows);\r\n  }\r\n\r\n  public connect(): Observable<T[]> {\r\n    return this.data$.asObservable();\r\n  }\r\n  public connectToRows(): Observable<RowModel<T>[]> {\r\n    return this.rows$.asObservable();\r\n  }\r\n\r\n  public getRow(): Observable<RowModel<T>> {\r\n    return this.row$.asObservable();\r\n  }\r\n\r\n  public emitRow(row: RowModel<T>) {\r\n    this.row$.next(row);\r\n  }\r\n\r\n  public connectEdit(): Observable<EditRow<T>> {\r\n    return this.edit$.asObservable();\r\n  }\r\n\r\n  public emitEdit(edit: EditRow<T>) {\r\n    this.edit$.next(edit);\r\n  }\r\n\r\n  public getRows() {\r\n    return [...this.rows];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { RowModel } from './models/row.model';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { TableService } from './table.service';\r\nimport { EditRow, TableDataSource } from './table-datasource';\r\nimport { ColumnModel } from '../columns/column.model';\r\n\r\ndeclare type id = string | number;\r\n\r\nexport interface TableOptions<T> {\r\n  filters?: (keyof T)[];\r\n  pagination?: PaginationInstance;\r\n  editable?: id[];\r\n  pending?: id[];\r\n}\r\n\r\nexport interface Table<T> {\r\n  columns: ColumnModel[];\r\n  data: T[];\r\n  options: TableOptions<T>;\r\n  model: T;\r\n  dataSource: TableDataSource<T>;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  template: (require('./table.component.html').default || require('./table.component.html')).length ? (require('./table.component.html').default || require('./table.component.html')) : '',\r\n  styles: [(require('./table.component.scss').default || require('./table.component.scss')).length ? (require('./table.component.scss').default || require('./table.component.scss')) : ''],\r\n  providers: [TableService, TableService],\r\n})\r\nexport class TableComponent<T> implements OnInit, Table<T> {\r\n  @Input() public theme: ThemePalette;\r\n\r\n  @Input() public data: T[];\r\n  @Input() public columns: ColumnModel[];\r\n  @Input() public model: T;\r\n  @Input() public options: TableOptions<T>;\r\n\r\n  @Input() public rowSlots: {};\r\n  @Input() public headerSlots: { headerActions: ElementRef };\r\n\r\n  private subscription: Subscription;\r\n\r\n  public dataSource: TableDataSource<T>;\r\n\r\n  public columnDefs: (string | keyof T)[];\r\n\r\n  public $data: Observable<RowModel<T>[]>;\r\n  public $columnDefs: Observable<string[]>;\r\n  public tableColumns: ColumnModel[];\r\n  public pagination: PaginationInstance;\r\n\r\n  @Output() register: EventEmitter<TableDataSource<T>> = new EventEmitter();\r\n  @Output() sort: EventEmitter<Sort> = new EventEmitter();\r\n  @Output() filter: EventEmitter<RowModel<T>> = new EventEmitter();\r\n\r\n  constructor(private tableService: TableService<T>) {}\r\n\r\n  ngOnInit() {\r\n    this.theme = this.theme || 'accent';\r\n    this.setTable();\r\n  }\r\n\r\n  private setTable() {\r\n    const { pagination, filters } = this.options;\r\n\r\n    this.dataSource = new TableDataSource<T>(this.data, this.options);\r\n\r\n    const data$ = this.dataSource.connectToRows();\r\n    const { columns, columnsDefs } = this.tableService.setColumns(\r\n      this.columns,\r\n      this.model,\r\n      [...filters]\r\n    );\r\n\r\n    this.$data = data$;\r\n    this.tableColumns = columns;\r\n    this.columnDefs = columnsDefs;\r\n    this.pagination = pagination;\r\n    this.register.emit(this.dataSource);\r\n\r\n    this.subscribeToRowEdit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public onRowClicked(row: T) {}\r\n\r\n  public onSort(sort: Sort) {\r\n    this.sort.emit(sort);\r\n  }\r\n\r\n  public onFilter(row: RowModel<T>) {\r\n    this.filter.emit(row);\r\n  }\r\n\r\n  public subscribeToRowEdit() {\r\n    this.subscription = this.dataSource\r\n      .connectEdit()\r\n      .subscribe((data: EditRow<T>) => {\r\n        const { row, options } = data;\r\n        const rows = this.dataSource.getRows();\r\n        const index = this.tableService.findRowIndex(rows, 'id', row.item);\r\n        const { editRow, columns } = this.tableService.onEditMode(\r\n          row,\r\n          this.tableColumns,\r\n          options\r\n        );\r\n\r\n        rows[index] = editRow;\r\n        this.tableColumns = columns;\r\n        this.dataSource.loadRows(rows);\r\n      });\r\n  }\r\n\r\n  private getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key];\r\n  }\r\n}\r\n","import { RowModel } from './models/row.model';\r\nimport { TableModel } from './models/table.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormService, Question } from '../form/services/form.service';\r\nimport { ColumnsService, ColumnsData } from '../columns/columns.service';\r\nimport { ColumnModel } from 'projects/lib-kakal-ui/src/lib/app/components/columns/column.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TableService<T> {\r\n  constructor(\r\n    private columnsService: ColumnsService<T>,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  public setColumns(\r\n    columns: ColumnModel[],\r\n    model: T,\r\n    filters: (string | keyof T)[]\r\n  ): ColumnsData<T> {\r\n    return this.columnsService.getColumns(model, filters, columns);\r\n  }\r\n\r\n  public findRowIndex(rows: RowModel<T>[], key: string, item?: T): number {\r\n    return rows.findIndex((row) => row.item[key] === item[key]);\r\n  }\r\n\r\n  private getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key];\r\n  }\r\n\r\n  // method to update form  data to table\r\n  public onSaveMode(\r\n    tableRows: RowModel<T>[],\r\n    key: string,\r\n    item?: T\r\n  ): RowModel<T>[] {\r\n    const rows = [...tableRows];\r\n    const index = this.findRowIndex(rows, key, item);\r\n    rows[index].editable = false;\r\n    rows[index].item = rows[index].formGroup.value;\r\n    return rows;\r\n  }\r\n\r\n  public onAddFormRow(table: TableModel<T>) {\r\n    const row: RowModel<T> = new RowModel<T>();\r\n    table.rows.unshift(row);\r\n    // this.onEditMode(row, table, 0);\r\n  }\r\n\r\n  public onEditTable(row : RowModel<T>, tableRows, tableColumns, index,  options?) {\r\n    const { editRow, columns } = this.onEditMode(row, tableColumns, options);\r\n    const rows = [...tableRows]\r\n    rows[index] = editRow;\r\n    return { rows, columns };\r\n  }\r\n\r\n  private updateRow(row: RowModel<T>, questions: Question[]): RowModel<T> {\r\n    const editRow = new RowModel({ ...row });\r\n    editRow.editable = true;\r\n    editRow.formGroup = this.formService.setFormGroup(questions);\r\n    return editRow;\r\n  }\r\n\r\n  public onEditMode(\r\n    row: RowModel<T>,\r\n    tableColumns: ColumnModel[],\r\n    editOptions?: any\r\n  ) {\r\n    const questions = this.setQuestions(tableColumns);\r\n    const columns = this.updateColumns(tableColumns, questions);\r\n    const editRow = this.updateRow(row, questions);\r\n    editRow.formGroup.patchValue({ ...editRow.item, ...editOptions });\r\n\r\n    return { editRow, columns };\r\n  }\r\n\r\n  private updateColumns(tableColumns, questions): ColumnModel[] {\r\n    return tableColumns.map((column, i) => {\r\n      return {\r\n        ...column,\r\n        question: questions.find(\r\n          (question) => question.key === column.columnDef\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  // method to update form inputs on edit mode\r\n  public updateFormState(row: RowModel<T>, options?: any) {\r\n    const { formGroup, item } = row;\r\n    formGroup.patchValue({ ...item, ...options });\r\n    return formGroup;\r\n  }\r\n\r\n  public setQuestions(tableColumns: ColumnModel[]): Question[] {\r\n    const columns = tableColumns;\r\n\r\n    if (columns) {\r\n      return columns\r\n        .filter((column) => column.type !== 'actions')\r\n        .map((column: ColumnModel) => {\r\n          const question = this.formService.setQuestion(column.control, {\r\n            key: column.columnDef,\r\n            label: column.label,\r\n          });\r\n          return question;\r\n        });\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ColumnModel } from 'projects/lib-kakal-ui/src/lib/app/components/columns/column.model';\r\nimport { TableOptions } from '../../components/table/table.component';\r\n\r\n@Component({\r\n  selector: 'app-table-ex',\r\n  template: (require('./table-ex.component.html').default || require('./table-ex.component.html')).length ? (require('./table-ex.component.html').default || require('./table-ex.component.html')) : '',\r\n  styles: [(require('./table-ex.component.scss').default || require('./table-ex.component.scss')).length ? (require('./table-ex.component.scss').default || require('./table-ex.component.scss')) : ''],\r\n})\r\nexport class TableExComponent<T> implements OnInit {\r\n  @Input() public theme: ThemePalette;\r\n\r\n  @Input() public data: T[];\r\n  @Input() public columns: ColumnModel[];\r\n  @Input() public model: T;\r\n  @Input() public options: TableOptions<T>;\r\n  \r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","export interface AssetStatus {\r\n  label : string,\r\n  value : number\r\n}\r\n\r\nexport class AssetsModel {\r\n\r\n  constructor(\r\n    public id?: number,\r\n    public block?: number,\r\n    public division?: number,\r\n    public subdivision?: number,\r\n    public area?: number,\r\n    public areaOwn?: number,\r\n    public property?: string,\r\n    public status?: AssetStatus,\r\n    public description?: string,\r\n    public location?: string,\r\n  ) {\r\n\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'area',\r\n})\r\nexport class AreaPipe implements PipeTransform {\r\n  transform(value: number, tag?: string): string {\r\n\r\n    tag = tag || 'מ\"ר';\r\n\r\n    return `${value} ${tag}`;\r\n  }\r\n}\r\n","import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\nimport { AreaPipe } from './area.pipe';\r\nimport { formatDate, formatNumber } from '@angular/common';\r\n\r\n@Pipe({\r\n  name: 'format',\r\n})\r\nexport class FormatPipe implements PipeTransform {\r\n  constructor(\r\n    private area: AreaPipe,\r\n    @Inject(LOCALE_ID) private locale: string\r\n  ) {}\r\n\r\n  transform(value: unknown, type?: string): unknown {\r\n    let result: unknown = value;\r\n\r\n    switch (typeof value) {\r\n      case 'number':\r\n        switch (type) {\r\n          case 'area':\r\n            result = this.area.transform(value);\r\n            break;\r\n          default:\r\n            result = formatNumber(value, this.locale);\r\n        }\r\n        break;\r\n      case 'object':\r\n        if (value instanceof Date) {\r\n          result = formatDate(value, 'M/d/yy', this.locale);\r\n        }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}