{"version":3,"file":"main.033b8362435696ea7c1d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAKA;AAOA;AAAA;AAAA;AALA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9DA;AAHA;AACA;AACA;AAQA;AAPA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/utilities/services/route.service.ts"],"sourcesContent":["import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class  RouterService {\r\n\r\n  private modulePrefix$: BehaviorSubject<string> = new BehaviorSubject('');\r\n  public currentPath$: BehaviorSubject<string> = new BehaviorSubject('');\r\n\r\n  private $modulePrefix: Subject<string> = new Subject();\r\n\r\n  constructor(private router: Router, private location: Location) {\r\n    this.ListenToRoute()\r\n  }\r\n\r\n  constructor(private router: Router, private location: Location) {\r\n    this.subscribeToRoute()\r\n  }\r\n\r\n  public goBack() {\r\n    this.history.pop();\r\n    if (this.history.length > 0) {\r\n      this.location.back();\r\n    } else {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  public ListenToRoute(): Observable<string> {\r\n    return this.router.events.pipe(\r\n      filter((event) => event instanceof NavigationEnd),\r\n      map((event: any) => {\r\n        this.history.push(event.urlAfterRedirects);\r\n        this.currentRoute = event.utl;\r\n        return event.url;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getLastPathObs(): Observable<string> {\r\n    return this.ListenToRoute().pipe(\r\n      map((path: string) => this.setLastPath(path))\r\n    );\r\n  }\r\n\r\n  public getLastPathObs(): Observable<string> {\r\n    return this.subscribeToRoute().pipe(\r\n      map((path: string) => this.setLastPath(path))\r\n    );\r\n  }\r\n\r\n  public async navigate(path: string) {\r\n    try {\r\n      await this.router.navigateByUrl(path);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  public getModulePrefixObs(): Observable<string> {\r\n    return this.modulePrefix$.asObservable();\r\n  }\r\n\r\n  public emitModulePrefix(path: string): void {\r\n    this.modulePrefix$.next(path);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}