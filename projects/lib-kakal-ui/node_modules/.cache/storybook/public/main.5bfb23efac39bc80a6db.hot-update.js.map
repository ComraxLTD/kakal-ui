{"version":3,"file":"main.5bfb23efac39bc80a6db.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAOA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AALA;AACA;AACA;AACA;AACA;AAcA;AAbA;AAAA","sources":["webpack://lib-kakal-ui/./src/lib/app/screens/layout/layout.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { Subscription, Observable } from 'rxjs';\nimport { IconModel } from '../../components/icon/icon.model';\nimport { NavbarService } from '../../components/navigation/navbar/navbar.service';\nimport { LayoutService } from './layout.service';\n\n@Component({\n  selector: 'kkl-layout',\n  template: (require('./layout.component.html').default || require('./layout.component.html')).length ? (require('./layout.component.html').default || require('./layout.component.html')) : '',\n  styles: [(require('./layout.component.scss').default || require('./layout.component.scss')).length ? (require('./layout.component.scss').default || require('./layout.component.scss')) : '']\n})\nexport class LayoutComponent implements OnInit {\n\n  private statusSubscription: Subscription;\n\n  @Input() public openIcon: string;\n  @Input() public logos: IconModel[];\n\n  @Input() public hideWizardPath: string[];\n  @Input() public showStatusPath: string[];\n\n  public wizard$: Observable<boolean>;\n\n  constructor(\n    private layoutService: LayoutService,\n    private navbarService: NavbarService\n  ) { }\n\n  ngOnInit(): void {\n    this.getCurrentPath();\n    this.subscribeToLastPath();\n    this.wizard$ = this.layoutService.getWizardObs();\n  }\n\n  ngOnDestroy(): void {\n    if (this.statusSubscription) {\n      this.statusSubscription.unsubscribe();\n    }\n  }\n\n\n  // VIEW METHODS SECTION\n\n  private findPath(list: any[], value: string): boolean {\n    return !!list.find((path: string) => path == value);\n  }\n\n  private handleStatusState(path: string) {\n    this.navbarService.emitShowStatus(this.findPath(this.showStatusPath, path));\n  }\n\n  private handleShowState(path: string) {\n    this.layoutService.toggleWizard(this.findPath(this.hideWizardPath, path));\n    this.handleStatusState(path);\n  }\n\n  // ROUTE METHODS SECTION\n  private getCurrentPath() {\n    // const path = this.routerService.getCurrentPath();\n    // this.handleShowState(path);\n  }\n\n  private subscribeToLastPath() {\n    //   this.routerSubscription = this.routerService\n    //     .getLastPathObs()\n    //     .subscribe((path) => {\n    //       this.handleShowState(path);\n    //     });\n    // }\n  }\n}\n"],"names":[],"sourceRoot":""}