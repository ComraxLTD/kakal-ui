
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in yo

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in yo
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary: mat-palette($mat-indigo);
$accent: mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$theme: mat-light-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  )
));

// Include theme styles for core and each component used in yo
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.

$plt-background: map-get($theme, background);
$plt-foreground: map-get($theme, foreground);

$p-keys: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900;
$a-keys: (
  100: A100,
  200: A200,
  400: A400,
  700: A700,
  500: 500,
);


@mixin theme {
  @include mat-core();
  // @include mat.all-component-themes($theme);
  @include angular-material-theme($theme);

  :root {
    @each $key in $p-keys {
      --p-#{$key}: #{map-get($primary, $key)};
    }


    @each $key, $value in $a-keys {
      --a-#{$key}: #{map-get($accent, $value)};
    }


    @each $key, $value in $plt-background {
      --b-#{$key}: #{$value};
    }


    @each $key, $value in $plt-foreground {
      --f-#{$key}: #{$value};
    }
  }
}
